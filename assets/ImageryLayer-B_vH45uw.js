const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-DVG33d0S.js","assets/utils-CzVjxagd.js","assets/index-BU6th8yW.js","assets/index-IYDF6MEx.css","assets/originUtils-DrfbVDlU.js","assets/saveUtils-CkdCsJRp.js","assets/rasterFieldUtils-DWgFJiUL.js"])))=>i.map(i=>d[i]);
import{aH as q,r8 as Wt,mr as Zt,aO as P,ar as i,as as l,d2 as j,at as S,aN as he,av as E,ao as ae,eV as Ze,ab as At,tn as Se,to as ut,tp as pt,fo as ie,bK as Z,bY as wt,ae as Be,b_ as U,aG as le,bJ as Kt,bM as Xt,ad as Vt,aL as qt,cA as V,aM as L,d5 as B,d4 as Q,a6 as D,eQ as vt,a_ as Ce,db as Yt,iR as er,eU as tr,fi as rr,tq as ir,M as sr,am as Qe,s as F,tr as ar,aq as yt,a3 as nr,aF as or,l8 as lr,ec as ur,eC as pr,ed as cr,eE as mr,eF as dr,eH as yr,eJ as hr,eD as fr,eG as gr,ee as wr,a2 as vr,_ as Rr,eL as Ye,al as br,iK as Sr,eS as Ir,ef as xr,gc as Fr,iS as Dr,dH as Tr}from"./index-BU6th8yW.js";import{o as jr,m as Pr,c as Nr,n as Cr,j as Or,$ as _r,b as $r,e as Mr,k as Pe,q as ht,f as Ar,v as Vr,p as qr,h as Er,V as Jr,s as Gr,u as Lr,l as zr}from"./rasterFieldUtils-DWgFJiUL.js";import{N as T,y as re,h as Ur,a as Br,j as Qr,u as Hr,p as kr,l as Wr,c as Zr,E as Kr,q as Xr,D as Yr,B as ei,t as ti,d as ri}from"./RasterJobHandlerMixin-CyI2K-B9.js";import{s as Et,B as Jt,d as ii,w as si,y as ai,a as He,z as ke,n as Ne,l as ni,m as Gt,_ as oi,j as Nt,P as li}from"./RasterSymbolizer-CUGvKudl.js";import{t as Ct}from"./imageBitmapUtils-Cc6A_5Xk.js";import{c as ft,l as ui}from"./dataUtils-DJy9wk1Y.js";import{f as Ot,p as pi,c as ci,o as mi}from"./RasterPresetRendererMixin-DgukVtIG.js";import{i as di,s as yi}from"./executeForIds-CzUzWDyN.js";import{s as hi}from"./executeQueryJSON-c_8vT9_V.js";import{$ as _t,P as fi,w as gi}from"./elevationInfoUtils-B4rQxazr.js";import"./ClassBreaksDefinition-jtMO-UkI.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./query-BlzbEhRC.js";import"./pbfQueryUtils-D1SNoYIW.js";import"./pbf-DptHnpkm.js";import"./OptimizedFeature-Cy0wyyDO.js";import"./OptimizedFeatureSet-BR8EEvDc.js";const wi={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},vi=new Set(["u1","u2","u4","u8","s8","u16","s16"]),Ri={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},bi=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Lt(s){return bi.has(s.type)}function Rt(s,r){var o;if(!s||!r)return q(s||r);const a=q(s);if(a.functionDefinition&&r.rasterFunctionDefinition){const e=r.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),zt(a.functionDefinition.arguments,r),a.rasterFunctionDefinition=a.functionDefinition.toJSON()}else((o=r.functionName)==null?void 0:o.toLowerCase())!=="none"&&(Ut(a.functionArguments).Raster=r);return a}function zt(s,r){for(const a in s)a.toLowerCase()==="raster"&&(s[a].type==="RasterFunctionVariable"?(s[a]=r.rasterFunctionDefinition,s[a].type="RasterFunctionTemplate"):s[a].type==="RasterFunctionTemplate"&&zt(s[a].arguments,r))}function ne(s){const r=q(wi[s.functionName+"Function"]),a=s.functionArguments;for(const o in a)o.toLowerCase()==="raster"?(r.arguments[o]=ne(a[o]),r.arguments[o].type="RasterFunctionTemplate"):o.toLowerCase()==="colormap"?(r.arguments[o].value=Pi(a[o]),r.arguments.ColorSchemeType.value=0):r.arguments[o].value=a[o];return r}function Si(s,r){switch(r=r||{},s.type){case"raster-stretch":return Fi(s,r);case"class-breaks":return Di(s,r);case"unique-value":return Ti(s,r);case"raster-colormap":return ji(s,r);case"vector-field":return Ii(s,r);case"raster-shaded-relief":return xi(s,r);case"flow":throw new Error("Unsupported rendering rule.")}}function Ut(s){const r=(s==null?void 0:s.Raster)??(s==null?void 0:s.raster);return r&&r.declaredClass==="esri.layers.support.RasterFunction"?Ut(r.functionArguments):s}const Je={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Ii(s,r){const a=new T;a.functionName="VectorFieldRenderer";const{dataType:o,bandNames:e}=r,t=o==="vector-uv";let n,u;if(e&&e.length===2){const y=e.map(v=>v.toLowerCase());n=y.indexOf("magnitude"),u=y.indexOf("direction")}n!==-1&&n!==null||(n=0,u=1);const p=s.rotationType==="arithmetic"?1:2,c=s.flowRepresentation==="flow-from"?0:1,m=s.visualVariables?s.visualVariables.find(y=>y.field==="Magnitude"):new Wt,d={magnitudeBandID:n,directionBandID:u,isUVComponents:t,referenceSystem:p,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:Ri[s.style.toLowerCase().replace("-","_")],minimumMagnitude:m.minDataValue,maximumMagnitude:m.maxDataValue,minimumSymbolSize:m.minSize,maximumSymbolSize:m.maxSize};a.functionArguments=d;const h=ne(a);return r.convertToRFT?T.fromJSON({rasterFunctionDefinition:h}):a}function xi(s,r){const a=r.convertToRFT;if(r.dataType!=="elevation"&&(r.dataType!=="generic"||r.bandCount!==1||r.pixelType!=="s16"&&r.pixelType!=="s32"&&r.pixelType!=="f32"&&r.pixelType!=="f64"))return new T;const o=new T;o.functionName="Hillshade";const e=s.hillshadeType==="traditional"?0:1,t=s.scalingType==="none"?1:3,n={HillshadeType:e,SlopeType:t,ZFactor:s.zFactor};return e===0&&(n.Azimuth=s.azimuth,n.Altitude=s.altitude),t===3&&(n.PSPower=s.pixelSizePower,n.PSZFactor=s.pixelSizeFactor),o.functionArguments=n,o.variableName="Raster",s.colorRamp&&(o.functionName="ShadedRelief",a?n.ColorRamp=Et(s.colorRamp):n.Colormap=Jt(s.colorRamp)),a?new T({rasterFunctionDefinition:ne(o)}):o}function Fi(s,r){var p,c;const a=r.convertToRFT,o=new T;o.functionName="Stretch";const e=Je[ii.toJSON(s.stretchType)],t="u8",n=(p=s.customStatistics)==null?void 0:p.map(m=>[m.min,m.max,m.avg??0,m.stddev??1]),u={StretchType:e,Statistics:n,DRA:s.dynamicRangeAdjustment,UseGamma:s.useGamma,Gamma:s.gamma,ComputeGamma:s.computeGamma};if(s.outputMin!=null&&(u.Min=s.outputMin),s.outputMax!=null&&(u.Max=s.outputMax),e===Je.standardDeviation?(u.NumberOfStandardDeviations=s.numberOfStandardDeviations,o.outputPixelType=t):e===Je.percentClip?(u.MinPercent=s.minPercent,u.MaxPercent=s.maxPercent,o.outputPixelType=t):e===Je.minMax?o.outputPixelType=t:e===Je.sigmoid&&(u.SigmoidStrengthLevel=s.sigmoidStrengthLevel),o.functionArguments=u,o.variableName="Raster",s.colorRamp){const m=s.colorRamp,d=new T;if(a)d.functionArguments={ColorRamp:Et(m)};else{const h=si(m,!0);if(h)d.functionArguments={colorRampName:h};else if(!r.convertColorRampToColormap||m.type!=="algorithmic"&&m.type!=="multipart"){const y=s.colorRamp.toJSON();y.type==="algorithmic"?y.algorithm=y.algorithm||"esriCIELabAlgorithm":y.type==="multipart"&&((c=y.colorRamps)!=null&&c.length)&&y.colorRamps.forEach(v=>v.algorithm=v.algorithm||"esriCIELabAlgorithm"),d.functionArguments={colorRamp:y}}else d.functionArguments={Colormap:Jt(m)}}return d.variableName="Raster",d.functionName="Colormap",d.functionArguments.Raster=o,a?new T({rasterFunctionDefinition:ne(d)}):d}return a?new T({rasterFunctionDefinition:ne(o)}):o}function Di(s,r){const a=[],o=[],e=[],t=[],{pixelType:u,rasterAttributeTable:p}=r,c=p==null?null:p.features,m=Bt(p);if(m&&c&&Array.isArray(c)&&s.classBreakInfos){s.classBreakInfos.forEach((R,w)=>{var A;const b=(A=R.symbol)==null?void 0:A.color;let f;b!=null&&b.a&&R.minValue!=null&&R.maxValue!=null&&c.forEach(I=>{R.minValue!=null&&R.maxValue!=null&&(f=I.attributes[s.field],(f>=R.minValue&&f<R.maxValue||w===s.classBreakInfos.length-1&&f>=R.minValue)&&t.push([I.attributes[m],b.r,b.g,b.b]))})});const v=u?ct(t,u):t,g=new T;return g.functionName="Colormap",g.functionArguments={},g.functionArguments.Colormap=v,g.variableName="Raster",r.convertToRFT?new T({rasterFunctionDefinition:ne(g)}):g}s.classBreakInfos.forEach((v,g)=>{if(v.minValue==null||v.maxValue==null)return;const R=v.symbol&&v.symbol.color;R!=null&&R.a?(g===0?a.push(v.minValue,v.maxValue+1e-4):a.push(v.minValue+1e-4,v.maxValue+1e-4),o.push(g),t.push([g,R.r,R.g,R.b])):e.push(v.minValue,v.maxValue)});const d=u?ct(t,u):t,h=new T;h.functionName="Remap",h.functionArguments={InputRanges:a,OutputValues:o,NoDataRanges:e},h.variableName="Raster";const y=new T;return y.functionName="Colormap",y.functionArguments={Colormap:d,Raster:h},r.convertToRFT?new T({rasterFunctionDefinition:ne(y)}):y}function ct(s,r){const a=vi.has(r)?Zt(r):null;return a&&s.push([Math.floor(a[0]-1),0,0,0],[Math.ceil(a[1]+1),0,0,0]),s}function Bt(s){if(s==null)return;const{fields:r}=s,a=r==null?void 0:r.find(o=>(o==null?void 0:o.name)&&o.name.toLowerCase()==="value");return a==null?void 0:a.name}function Ti(s,r){var d,h;const a=[],{pixelType:o,rasterAttributeTable:e}=r,t=e==null?null:e.features,n=Bt(e),u=(h=(d=s.defaultSymbol)==null?void 0:d.color)==null?void 0:h.toRgb(),p=s.uniqueValueInfos;if(p)if(t){if(n){const y=new Map;p.forEach(g=>{const R=g.value,w=$t(g);R!=null&&(w!=null&&w.a)&&y.set(String(R),w.toRgb())});const v=s.field;v&&t.forEach(({attributes:g})=>{const R=String(g[v]),w=g[n],b=y.get(R);b?a.push([w,...b]):u&&a.push([w,...u])})}}else for(let y=0;y<p.length;y++){const v=p[y],g=$t(v),R=+v.value;if(g!=null&&g.a){if(isNaN(R))return null;a.push([R,g.r,g.g,g.b])}}const c=o?ct(a,o):a,m=new T;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=c,m.variableName="Raster",r.convertToRFT?new T({rasterFunctionDefinition:ne(m)}):m}function $t(s){var r,a,o,e,t;return((r=s.symbol)==null?void 0:r.type)==="polygon-3d"?(e=(o=(a=s.symbol.symbolLayers)==null?void 0:a.find(n=>n.type==="fill"))==null?void 0:o.material)==null?void 0:e.color:(t=s.symbol)==null?void 0:t.color}function ji(s,r){const a=s.extractColormap();if(!a||a.length===0)return null;const{pixelType:o}=r,e=o?ct(a,o):a,t=new T;return t.functionName="Colormap",t.functionArguments={},t.functionArguments.Colormap=e,r.convertToRFT?new T({rasterFunctionDefinition:ne(t)}):t}function Pi(s){const r=[],a=[];return s.forEach(o=>{r.push(o[0]),a.push(ai([...o.slice(1),255]))}),{type:"RasterColormap",values:r,colors:a}}let _=class extends P{constructor(){super(...arguments),this.layer=null,this.requestRawData=!1,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(r,a,o){this.layer.version<10.3||(a[o]=r)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(r,a,o){this.format&&this.format.toLowerCase().includes("jpg")&&r!=null&&(a[o]=r)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(r,a,o){this.format==="lerc"&&r!=null&&(a[o]=r)}get format(){var r;return this.requestRawData||((r=this.layer.renderer)==null?void 0:r.type)==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:r}=this;return r.pixelType!==r.serviceRasterInfo.pixelType?r.pixelType:void 0}writeLercVersion(r,a,o){this.format==="lerc"&&this.layer.version>=10.5&&(a[o]=r)}get version(){const r=this.layer;return r.commitProperty("bandIds"),r.commitProperty("format"),r.commitProperty("compressionQuality"),r.commitProperty("compressionTolerance"),r.commitProperty("interpolation"),r.commitProperty("noData"),r.commitProperty("noDataInterpretation"),r.commitProperty("mosaicRule"),r.commitProperty("rasterFunction"),r.commitProperty("adjustAspectRatio"),r.commitProperty("pixelFilter"),r.commitProperty("pixelType"),r.commitProperty("definitionExpression"),r.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(r){this._set("version",r)}get mosaicRule(){const r=this.layer;let a=r.mosaicRule;const o=r.definitionExpression;return a?o&&o!==a.where&&(a=a.clone(),a.where=o):o&&(a=new re({where:o})),a}get rasterFunction(){var n,u;const r=this.layer;let{rasterFunction:a}=r;const o=r.pixelFilter,e=!r.format||r.format.includes("jpg")||r.format.includes("png");this.requestRawData||(a=this._addResampleRasterFunction(a));const t=(n=r.multidimensionalSubset)==null?void 0:n.areaOfInterest;return t&&(a=Ni(a,t)),this.requestRawData||!e||o||((u=r.renderer)==null?void 0:u.type)==="vector-field"||(a=this.combineRendererWithRenderingRule(a)),a}combineRendererWithRenderingRule(r){const a=this.layer,{rasterInfo:o,renderer:e}=a;return r=r||a.rasterFunction,!e||!Lt(e)?r:Rt(Si(e,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandNames:o.bandInfos.map(({name:t})=>t),convertColorRampToColormap:a.version<10.6,convertToRFT:!!(r!=null&&r.rasterFunctionDefinition),bandCount:o.bandCount}),r)}_addResampleRasterFunction(r){var t;if(((t=this.layer.renderer)==null?void 0:t.type)!=="vector-field"||(r==null?void 0:r.functionName)==="Resample")return r;const a=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,o=this.layer.serviceRasterInfo.pixelSize;let e=new T({functionName:"Resample",functionArguments:{ResamplingType:a,InputCellSize:o}});return e=r!=null&&r.rasterFunctionDefinition?new T({rasterFunctionDefinition:ne(e)}):e,Rt(e,r)}};function Ni(s,r){const a=new T({functionName:"Clip",functionArguments:{ClippingGeometry:r.toJSON(),ClippingType:1}});return Rt(a,s)}i([l()],_.prototype,"layer",void 0),i([l()],_.prototype,"requestRawData",void 0),i([l({json:{write:!0}})],_.prototype,"adjustAspectRatio",null),i([j("adjustAspectRatio")],_.prototype,"writeAdjustAspectRatio",null),i([l({json:{write:!0}})],_.prototype,"bandIds",null),i([l({json:{write:!0}})],_.prototype,"compression",void 0),i([l({json:{write:!0}})],_.prototype,"compressionQuality",null),i([j("compressionQuality")],_.prototype,"writeCompressionQuality",null),i([l({json:{write:!0}})],_.prototype,"compressionTolerance",null),i([j("compressionTolerance")],_.prototype,"writeCompressionTolerance",null),i([l({json:{write:!0}})],_.prototype,"format",null),i([l({type:String,json:{read:{reader:He.read},write:{writer:He.write}}})],_.prototype,"interpolation",null),i([l({json:{write:!0}})],_.prototype,"noData",null),i([l({type:String,json:{read:{reader:ke.read},write:{writer:ke.write}}})],_.prototype,"noDataInterpretation",null),i([l({type:Ne.apiValues,json:{read:Ne.read,write:Ne.write}})],_.prototype,"pixelType",null),i([l({json:{write:!0}})],_.prototype,"lercVersion",void 0),i([j("lercVersion")],_.prototype,"writeLercVersion",null),i([l({type:Number})],_.prototype,"version",null),i([l({json:{write:!0}})],_.prototype,"mosaicRule",null),i([l({json:{write:!0,name:"renderingRule"}})],_.prototype,"rasterFunction",null),_=i([S("esri.layers.support.ExportImageServiceParameters")],_);let we=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};i([l({type:E,json:{read:!0}})],we.prototype,"fromGeometry",void 0),i([l({type:E,json:{read:!0,write:!0}})],we.prototype,"toGeometry",void 0),i([l({json:{write:!0}})],we.prototype,"objectIds",void 0),i([l({type:String,json:{write:!0}})],we.prototype,"where",void 0),i([l({type:Number,json:{write:!0}})],we.prototype,"maxCount",void 0),we=i([S("esri.rest.support.FindImagesParameters")],we);const Qt=s=>{const r=s;let a=class extends r{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return i([l({json:{write:!0}})],a.prototype,"make",void 0),i([l({json:{write:!0}})],a.prototype,"model",void 0),i([l({json:{write:!0}})],a.prototype,"focalLength",void 0),i([l({json:{write:!0}})],a.prototype,"pixelSize",void 0),i([l({json:{write:!0}})],a.prototype,"rows",void 0),i([l({json:{write:!0}})],a.prototype,"cols",void 0),a=i([S("esri.rest.support.CameraInfoMixin")],a),a};let K=class extends Qt(P){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(r,a){a.acquisitionDate=r==null?void 0:r.getTime()}};i([l({json:{write:!0}})],K.prototype,"id",void 0),i([l({json:{name:"uri",write:!0}})],K.prototype,"referenceUri",void 0),i([l({type:Date,json:{write:!0}})],K.prototype,"acquisitionDate",void 0),i([j("acquisitionDate")],K.prototype,"writeAcquisitionDate",null),i([l({json:{write:!0}})],K.prototype,"cameraID",void 0),i([l({type:E,json:{write:!0}})],K.prototype,"center",void 0),i([l({type:E,json:{write:!0}})],K.prototype,"perspectiveCenter",void 0),i([l({json:{write:!0}})],K.prototype,"orientation",void 0),K=i([S("esri.rest.support.ImageInspectionInfo")],K);const Ci=K;let et=class extends P{constructor(){super(...arguments),this.images=null}};i([l({type:[Ci],json:{write:!0}})],et.prototype,"images",void 0),et=i([S("esri.rest.support.FindImagesResult")],et);var bt;let Fe=bt=class extends P{constructor(s){super(s),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new bt(q({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};i([l({type:[String],json:{name:"angleName",write:!0}})],Fe.prototype,"angleNames",void 0),i([l({type:E,json:{write:!0}})],Fe.prototype,"point",void 0),i([l({type:ae,json:{write:!0}})],Fe.prototype,"spatialReference",void 0),i([l({type:Ze,json:{write:!0}})],Fe.prototype,"rasterId",void 0),Fe=bt=i([S("esri.rest.support.ImageAngleParameters")],Fe);let Oe=class extends P{constructor(r){super(r),this.north=null,this.up=null,this.spatialReference=null}};i([l({type:Number,json:{write:!0}})],Oe.prototype,"north",void 0),i([l({type:Number,json:{write:!0}})],Oe.prototype,"up",void 0),i([l({type:ae,json:{write:!0}})],Oe.prototype,"spatialReference",void 0),Oe=i([S("esri.rest.support.ImageAngleResult")],Oe);const W=new At({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let Re=class extends P{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};i([l({type:Number,json:{read:!0,write:!0}})],Re.prototype,"value",void 0),i([l({type:String,json:{read:!0,write:!0}})],Re.prototype,"displayValue",void 0),i([l({type:Number,json:{read:!0,write:!0}})],Re.prototype,"uncertainty",void 0),Re=i([S("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],Re);let Ve=class extends Re{constructor(){super(...arguments),this.unit=null}};i([l({type:String,json:{read:Se.read,write:Se.write}})],Ve.prototype,"unit",void 0),Ve=i([S("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],Ve);let tt=class extends Re{constructor(){super(...arguments),this.unit=null}};i([l({type:String,json:{read:ut.read,write:ut.write}})],tt.prototype,"unit",void 0),tt=i([S("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],tt);let We=class extends Re{constructor(){super(...arguments),this.unit=null}};i([l({type:String,json:{read:pt.read,write:pt.write}})],We.prototype,"unit",void 0),We=i([S("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],We);let te=class extends P{constructor(r){super(r),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};i([l()],te.prototype,"type",void 0),i([l({type:W.apiValues,json:{read:W.read,write:W.write}})],te.prototype,"measureOperation",void 0),i([l({type:re,json:{write:!0}})],te.prototype,"mosaicRule",void 0),i([l({type:E,json:{write:!0}})],te.prototype,"pixelSize",void 0),i([l({json:{write:!0}})],te.prototype,"raster",void 0),te=i([S("esri.rest.support.BaseImageMeasureParameters")],te);var St;let pe=St=class extends te{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=s.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new St(q({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([l({types:Z,json:{name:"fromGeometry",read:!0,write:!0}})],pe.prototype,"geometry",void 0),i([j("geometry")],pe.prototype,"writeGeometry",null),i([l({type:W.apiValues,json:{write:W.write}})],pe.prototype,"measureOperation",null),i([l({json:{read:!0}})],pe.prototype,"is3D",void 0),i([l({type:String,json:{read:Se.read,write:Se.write}})],pe.prototype,"linearUnit",void 0),i([l({type:String,json:{read:ut.read,write:ut.write}})],pe.prototype,"areaUnit",void 0),pe=St=i([S("esri.rest.support.ImageAreaParameters")],pe);let be=class extends P{constructor(r){super(r),this.name=null,this.sensorName=null}};i([l({type:String,json:{read:!0,write:!0}})],be.prototype,"name",void 0),i([l({type:String,json:{read:!0,write:!0}})],be.prototype,"sensorName",void 0),be=i([S("esri.rest.support.BaseImageMeasureResult")],be);let Ge=class extends be{constructor(){super(...arguments),this.area=null,this.perimeter=null}};i([l({type:tt,json:{read:!0,write:!0}})],Ge.prototype,"area",void 0),i([l({type:Ve,json:{read:!0,write:!0}})],Ge.prototype,"perimeter",void 0),Ge=i([S("esri.rest.support.ImageAreaResult")],Ge);let rt=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.outSpatialReference=null}};i([l({type:ae,json:{name:"outSR",write:!0}})],rt.prototype,"outSpatialReference",void 0),rt=i([S("esri.rest.support.ImageBoundaryParameters")],rt);let _e=class extends P{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(r,a){return r==null?null:r.rings?wt.fromJSON(r):Be.fromJSON(r)}};i([l({type:Number,json:{write:!0}})],_e.prototype,"area",void 0),i([l({types:Z,json:{name:"shape",write:!0}})],_e.prototype,"geometry",void 0),i([U("geometry")],_e.prototype,"readGeometry",null),_e=i([S("esri.rest.support.ImageBoundaryResult")],_e);var It;let se=It=class extends te{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=s.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new It(q({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([l({type:E,json:{read:!0,write:!0}})],se.prototype,"fromGeometry",void 0),i([j("fromGeometry")],se.prototype,"writeFromGeometry",null),i([l({type:E,json:{read:!0,write:!0}})],se.prototype,"toGeometry",void 0),i([l({type:W.apiValues,json:{write:W.write}})],se.prototype,"measureOperation",null),i([l({json:{read:!0}})],se.prototype,"is3D",void 0),i([l({type:String,json:{read:Se.read,write:Se.write}})],se.prototype,"linearUnit",void 0),i([l({type:String,json:{read:pt.read,write:pt.write}})],se.prototype,"angularUnit",void 0),se=It=i([S("esri.rest.support.ImageDistanceParameters")],se);let $e=class extends be{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};i([l({type:Ve,json:{read:!0,write:!0}})],$e.prototype,"distance",void 0),i([l({type:We,json:{read:!0,write:!0}})],$e.prototype,"azimuthAngle",void 0),i([l({type:We,json:{read:!0,write:!0}})],$e.prototype,"elevationAngle",void 0),$e=i([S("esri.rest.support.ImageDistanceResult")],$e);let ce=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=JSON.stringify(s.toJSON()))}};i([l({types:Z,json:{read:le,write:!0}})],ce.prototype,"geometry",void 0),i([j("geometry")],ce.prototype,"writeGeometry",null),i([l({json:{write:!0}})],ce.prototype,"objectIds",void 0),i([Kt(Xt,{ignoreUnknown:!1,name:"spatialRel"})],ce.prototype,"spatialRelationship",void 0),i([l({type:Vt,json:{name:"time",write:!0}})],ce.prototype,"timeExtent",void 0),i([l({type:String,json:{write:!0}})],ce.prototype,"where",void 0),ce=i([S("esri.rest.support.ImageGPSInfoParameters")],ce);let it=class extends Qt(P){constructor(){super(...arguments),this.id=null}};i([l({json:{write:!0}})],it.prototype,"id",void 0),it=i([S("esri.rest.support.CameraInfo")],it);const Oi=it;let X=class extends P{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(r,a){a.acquisitionDate=r==null?void 0:r.getTime()}};i([l({json:{write:!0}})],X.prototype,"id",void 0),i([l({json:{write:!0}})],X.prototype,"name",void 0),i([l({type:Date,json:{write:!0}})],X.prototype,"acquisitionDate",void 0),i([j("acquisitionDate")],X.prototype,"writeAcquisitionDate",null),i([l({json:{write:!0}})],X.prototype,"cameraID",void 0),i([l({type:E,json:{write:!0}})],X.prototype,"center",void 0),i([l({json:{write:!0}})],X.prototype,"gps",void 0),i([l({json:{write:!0}})],X.prototype,"orientation",void 0),X=i([S("esri.rest.support.ImageGPSInfo")],X);const _i=X;let Le=class extends P{constructor(){super(...arguments),this.images=null,this.cameras=null}};i([l({type:[_i],json:{write:!0}})],Le.prototype,"images",void 0),i([l({type:[Oi],json:{write:!0}})],Le.prototype,"cameras",void 0),Le=i([S("esri.rest.support.ImageGPSInfoResult")],Le);var xt;let me=xt=class extends te{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=s.toJSON())}get measureOperation(){return this.operationType}clone(){return new xt(q({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([l({type:E,json:{read:!0}})],me.prototype,"fromGeometry",void 0),i([j("fromGeometry")],me.prototype,"writeFromGeometry",null),i([l({type:E,json:{read:!0,write:!0}})],me.prototype,"toGeometry",void 0),i([l({type:W.apiValues,json:{write:W.write}})],me.prototype,"measureOperation",null),i([l({json:{read:!0}})],me.prototype,"operationType",void 0),i([l({type:String,json:{read:Se.read,write:Se.write}})],me.prototype,"linearUnit",void 0),me=xt=i([S("esri.rest.support.ImageHeightParameters")],me);let st=class extends be{constructor(){super(...arguments),this.height=null}};i([l({type:Ve,json:{read:!0,write:!0}})],st.prototype,"height",void 0),st=i([S("esri.rest.support.ImageHeightResult")],st);var Ft;let M=Ft=class extends P{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=JSON.stringify(s.toJSON()))}set mosaicRule(s){let r=s;r!=null&&r.mosaicMethod&&(r=re.fromJSON({...r.toJSON(),mosaicMethod:r.mosaicMethod,mosaicOperation:r.mosaicOperation})),this._set("mosaicRule",r)}writeMosaicRule(s,r,a){s!=null&&(r[a]=JSON.stringify(s.toJSON()))}set rasterFunction(s){let r=s;r!=null&&r.rasterFunction&&(r=T.fromJSON({...r.toJSON(),rasterFunction:r.rasterFunction,rasterFunctionArguments:r.rasterFunctionArguments})),this._set("rasterFunction",r)}writeRasterFunction(s,r,a){s!=null&&(r[a]=JSON.stringify(s.toJSON())),s.rasterFunctionDefinition&&(r[a]=JSON.stringify(s.rasterFunctionDefinition))}writeRasterFunctions(s,r,a){s!=null&&(r[a]=JSON.stringify(s.map(o=>o.rasterFunctionDefinition||o.toJSON())))}writePixelSize(s,r,a){s!=null&&(r[a]=JSON.stringify(s))}writeTimeExtent(s,r,a){if(s!=null){const o=s.start!=null?s.start.getTime():null,e=s.end!=null?s.end.getTime():null;r[a]=o!=null?e!=null?`${o},${e}`:`${o}`:null}}clone(){return new Ft(q({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};i([l({types:Z,json:{write:!0}})],M.prototype,"geometry",void 0),i([j("geometry")],M.prototype,"writeGeometry",null),i([l({type:re,json:{write:!0}})],M.prototype,"mosaicRule",null),i([j("mosaicRule")],M.prototype,"writeMosaicRule",null),i([l({type:T,json:{write:!0,name:"renderingRule"}})],M.prototype,"rasterFunction",null),i([j("rasterFunction")],M.prototype,"writeRasterFunction",null),i([l({type:[T],json:{write:!0,name:"renderingRules"}})],M.prototype,"rasterFunctions",void 0),i([j("rasterFunctions")],M.prototype,"writeRasterFunctions",null),i([l({type:E,json:{write:!0}})],M.prototype,"pixelSize",void 0),i([j("pixelSize")],M.prototype,"writePixelSize",null),i([l({type:Boolean,json:{write:!0}})],M.prototype,"returnGeometry",void 0),i([l({type:Boolean,json:{write:!0}})],M.prototype,"returnCatalogItems",void 0),i([l({type:Boolean,json:{write:!0}})],M.prototype,"returnPixelValues",void 0),i([l({type:Number,json:{write:!0}})],M.prototype,"maxItemCount",void 0),i([l({type:Vt,json:{write:{target:"time"}}})],M.prototype,"timeExtent",void 0),i([j("timeExtent")],M.prototype,"writeTimeExtent",null),i([l({json:{write:!0}})],M.prototype,"raster",void 0),i([l({json:{write:!0}})],M.prototype,"viewId",void 0),i([l({type:Boolean,json:{write:!0}})],M.prototype,"processAsMultidimensional",void 0),M=Ft=i([S("esri.rest.support.ImageIdentifyParameters")],M);let Y=class extends P{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};i([l({json:{write:!0}})],Y.prototype,"catalogItemVisibilities",void 0),i([l({type:qt,json:{write:!0}})],Y.prototype,"catalogItems",void 0),i([l({type:E,json:{write:!0}})],Y.prototype,"location",void 0),i([l({json:{write:!0}})],Y.prototype,"name",void 0),i([l({json:{write:!0}})],Y.prototype,"objectId",void 0),i([l({json:{write:!0}})],Y.prototype,"processedValues",void 0),i([l({json:{write:!0}})],Y.prototype,"properties",void 0),i([l({json:{write:!0}})],Y.prototype,"value",void 0),Y=i([S("esri.rest.support.ImageIdentifyResult")],Y);var Dt;let Me=Dt=class extends P{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(s,r,a){r.geometries={geometryType:"esriGeometryPoint",geometries:s.map(o=>o.toJSON())}}clone(){var s;return new Dt({geometries:((s=this.geometries)==null?void 0:s.map(r=>r.clone()))??[],rasterId:this.rasterId})}};i([l({type:[E],json:{write:!0}})],Me.prototype,"geometries",void 0),i([j("geometries")],Me.prototype,"writeGeometry",null),i([l({type:Ze,json:{write:!0}})],Me.prototype,"rasterId",void 0),Me=Dt=i([S("esri.rest.support.ImagePixelLocationParameters")],Me);let at=class extends P{constructor(){super(...arguments),this.geometries=null}};i([l({json:{write:!0}})],at.prototype,"geometries",void 0),at=i([S("esri.rest.support.ImagePixelLocationResult")],at);var Tt;let De=Tt=class extends te{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=s.toJSON())}get measureOperation(){const{is3D:s,geometry:r}=this;return r.type==="point"?s?"point-3D":"point":s?"centroid-3D":"centroid"}clone(){return new Tt(q({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([l({types:Z,json:{name:"fromGeometry",read:le}})],De.prototype,"geometry",void 0),i([j("geometry")],De.prototype,"writeGeometry",null),i([l({type:W.apiValues,json:{read:W.read,write:W.write}})],De.prototype,"measureOperation",null),i([l({json:{read:!0}})],De.prototype,"is3D",void 0),De=Tt=i([S("esri.rest.support.ImagePointParameters")],De);let nt=class extends be{constructor(){super(...arguments),this.point=null}};i([l({type:E,json:{name:"point.value",read:!0,write:!0}})],nt.prototype,"point",void 0),nt=i([S("esri.rest.support.ImagePointResult")],nt);let Te=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(s,r,a){r.geometries=s!=null&&s.length?{geometryType:ie(s[0]),geometries:s.map(o=>({...o.toJSON(),spatialReference:void 0}))}:null}};i([l({types:[Z]})],Te.prototype,"geometries",void 0),i([j("geometries")],Te.prototype,"writeGeometries",null),i([l({type:[Ze],json:{write:!0}})],Te.prototype,"rasterIds",void 0),i([l({type:ae,json:{name:"outSR",write:!0}})],Te.prototype,"outSpatialReference",void 0),Te=i([S("esri.rest.support.ImageToMapMultirayParameters")],Te);let de=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(r,a,o){r!=null&&(a.geometryType=ie(r),a[o]={...r.toJSON(),spatialReference:void 0})}};i([l({types:Z,json:{read:le,write:!0}})],de.prototype,"geometry",void 0),i([j("geometry")],de.prototype,"writeGeometry",null),i([l({json:{write:!0}})],de.prototype,"rasterId",void 0),i([l({type:ae,json:{name:"outSR",write:!0}})],de.prototype,"outSpatialReference",void 0),i([l({json:{name:"options.DOff",write:!0}})],de.prototype,"depthOffset",void 0),i([l({json:{name:"options.Adjust",write:!0}})],de.prototype,"adjust",void 0),de=i([S("esri.rest.support.ImageToMapParameters")],de);let ze=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};i([l({type:String,json:{name:"uri",write:!0}})],ze.prototype,"referenceUri",void 0),i([l({type:Number,json:{write:!0}})],ze.prototype,"rasterId",void 0),ze=i([S("esri.rest.support.ImageUrlParameters")],ze);let ot=class extends P{constructor(){super(...arguments),this.url=null}};i([l({json:{name:"imageURL",write:!0}})],ot.prototype,"url",void 0),ot=i([S("esri.rest.support.ImageUrlResult")],ot);const gt=new At({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let ye=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(s,r,a){s!=null&&s.length&&(r.geometryType=ie(s[0]),r.geometries=s.map(o=>o.toJSON()))}};i([l({types:[Z]})],ye.prototype,"geometries",void 0),i([j("geometries")],ye.prototype,"writeGeometries",null),i([l({type:re,json:{write:!0}})],ye.prototype,"mosaicRule",void 0),i([l({type:E,json:{write:!0}})],ye.prototype,"pixelSize",void 0),i([l({json:{write:!0}})],ye.prototype,"constantZ",void 0),i([l({type:gt.apiValues,json:{read:gt.read,write:gt.write}})],ye.prototype,"baseType",void 0),ye=i([S("esri.rest.support.ImageVolumeParameters")],ye);let ee=class extends P{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};i([l({json:{write:!0}})],ee.prototype,"area",void 0),i([l({json:{write:!0}})],ee.prototype,"cut",void 0),i([l({json:{write:!0}})],ee.prototype,"fill",void 0),i([l({json:{name:"maxz",write:!0}})],ee.prototype,"maxZ",void 0),i([l({json:{name:"minz",write:!0}})],ee.prototype,"minZ",void 0),i([l({json:{name:"meanz",write:!0}})],ee.prototype,"meanZ",void 0),i([l({json:{write:!0}})],ee.prototype,"cutCellCount",void 0),i([l({json:{write:!0}})],ee.prototype,"fillCellCount",void 0),ee=i([S("esri.rest.support.ImageVolume")],ee);const $i=ee;let lt=class extends P{constructor(){super(...arguments),this.volumes=[]}};i([l({type:[$i],json:{write:!0}})],lt.prototype,"volumes",void 0),lt=i([S("esri.rest.support.ImageVolumeResult")],lt);let je=class extends he.ClonableMixin(P){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]=JSON.stringify(s))}};i([l({types:Z,json:{read:le,write:!0}})],je.prototype,"geometry",void 0),i([j("geometry")],je.prototype,"writeGeometry",null),i([l({json:{write:!0}})],je.prototype,"rasterId",void 0),i([l({json:{name:"options.VisibleOnly",write:!0}})],je.prototype,"visibleOnly",void 0),je=i([S("esri.rest.support.MapToImageParameters")],je);let ve=class extends P{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(r,a){return r.spatialReference||(r={...r,spatialReference:a.Shape.spatialReference}),E.fromJSON(r)}};i([l({types:Z,json:{name:"Shape",read:le,write:!0}})],ve.prototype,"geometry",void 0),i([l({json:{name:"Length",write:!0}})],ve.prototype,"length",void 0),i([l({json:{name:"Area",write:!0}})],ve.prototype,"area",void 0),i([l({type:E,json:{name:"Center",write:!0}})],ve.prototype,"center",void 0),i([U("center")],ve.prototype,"readCenter",null),ve=i([S("esri.rest.support.MeasureAreaFromImageResult")],ve);var jt;let Ae=jt=class extends P{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(s,r,a){s!=null&&(r.geometryType=ie(s),r[a]={...s.toJSON(),spatialReference:void 0})}clone(){const s=q({geometry:this.geometry,rasterId:this.rasterId});return new jt(s)}};i([l({types:Z,json:{name:"fromGeometry",read:le,write:!0}})],Ae.prototype,"geometry",void 0),i([j("geometry")],Ae.prototype,"writeGeometry",null),i([l({json:{write:!0}})],Ae.prototype,"rasterId",void 0),Ae=jt=i([S("esri.rest.support.MeasureFromImageParameters")],Ae);let Ue=class extends P{constructor(){super(...arguments),this.geometry=null,this.length=null}};i([l({types:Z,json:{name:"Shape",read:le,write:!0}})],Ue.prototype,"geometry",void 0),i([l({json:{name:"Length",write:!0}})],Ue.prototype,"length",void 0),Ue=i([S("esri.rest.support.MeasureLengthFromImageResult")],Ue);function Pt(s){const r=s==null?void 0:s.time;if(r&&(r.start!=null||r.end!=null)){const a=[];r.start!=null&&a.push(r.start),r.end==null||a.includes(r.end)||a.push(r.end),s.time=a.join(",")}}async function Ht(s,r,a){r=V(Qr,r);const o=L(s),e=r.geometry?[r.geometry]:[],t=await Ce(e),n=r.toJSON();Pt(n);const u=t==null?void 0:t[0];u!=null&&(n.geometry=oe(u));const p=B({...o.query,f:"json",...n});return Q(p,a)}async function Mi(s,r,a){const o=(r=V(ye,r)).toJSON();o.geometries=JSON.stringify(o.geometries);const e=L(s),t=B({...e.query,f:"json",...o}),n=Q(t,a),{data:u}=await D(`${e.path}/calculateVolume`,n);return lt.fromJSON({volumes:u.results})}async function Ai(s,r,a){var p,c,m;const o=(r=V(Fe,r)).toJSON();o.angleName!=null&&(o.angleName=o.angleName.join(",")),(c=(p=r==null?void 0:r.point)==null?void 0:p.spatialReference)!=null&&c.imageCoordinateSystem&&(o.point.spatialReference=dt(r.point.spatialReference)),(m=r==null?void 0:r.spatialReference)!=null&&m.imageCoordinateSystem&&(o.spatialReference=qe(r.spatialReference));const e=L(s),t=B({...e.query,f:"json",...o}),n=Q(t,a),{data:u}=await D(`${e.path}/computeAngles`,n);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new ae({wkid:0,imageCoordinateSystem:u.spatialReference}):ae.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Oe(u)}async function Vi(s,r,a){var c;const o=(r=V(Me,r)).toJSON(),{geometries:e}=r;if(e)for(let m=0;m<e.length;m++)(c=e[m].spatialReference)!=null&&c.imageCoordinateSystem&&(o.geometries.geometries[m].spatialReference=dt(e[m].spatialReference));const t=L(s),n=B({...t.query,f:"json",...o}),u=Q(n,a),{data:p}=await D(`${t.path}/computePixelLocation`,u);return at.fromJSON(p)}async function qi(s,r,a){const o=await Ht(s,r,a),e=L(s),{data:t}=await D(`${e.path}/computeStatisticsHistograms`,o),{statistics:n}=t;return n!=null&&n.length&&n.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:n,histograms:t.histograms}}async function Ei(s,r,a){const o=await Ht(s,r,a),e=L(s),{data:t}=await D(`${e.path}/computeHistograms`,o);return{histograms:t.histograms}}async function Ji(s,r,a){var d;const o=(r=V(Ur,r)).toJSON();Pt(o),(d=o.outFields)!=null&&d.length&&(o.outFields=o.outFields.join(","));const e=await Ce(r.geometry),t=e==null?void 0:e[0];t!=null&&(o.geometry=oe(t));const n=L(s),u=B({...n.query,f:"json",...o}),p=Q(u,a),{data:c}=await D(`${n.path}/getSamples`,p),m=c.samples.map(h=>{const y=h.value==="NaN"||h.value===""?null:h.value.split(" ").map(v=>Number(v));return{...h,pixelValue:y}});return Br.fromJSON({samples:m})}async function Mt(s,r,a){r=V(M,r);const o=L(s),e=r.geometry?[r.geometry]:[];return Ce(e).then(t=>{const n=r.toJSON(),u=t==null?void 0:t[0];u!=null&&(n.geometry=JSON.stringify(oe(u)));const p=B({...o.query,f:"json",...n}),c=Q(p,a);return D(o.path+"/identify",c)}).then(t=>Y.fromJSON(t.data))}async function Gi(s,r,a){r=V(me,r);const o=await mt(s,r,[r.fromGeometry,r.toGeometry],a);return st.fromJSON(o)}async function Li(s,r,a){r=V(pe,r);const o=await mt(s,r,[r.geometry],a);return Ge.fromJSON(o)}async function zi(s,r,a){r=V(De,r);const o=await mt(s,r,[r.geometry],a);return nt.fromJSON(o)}async function Ui(s,r,a){r=V(se,r);const o=await mt(s,r,[r.fromGeometry,r.toGeometry],a);return $e.fromJSON(o)}async function mt(s,r,a,o){const e=L(s),t=await Ce(a),n=r.toJSON();t[0]!=null&&(n.fromGeometry=JSON.stringify(oe(t[0]))),t[1]!=null&&(n.toGeometry=JSON.stringify(oe(t[1])));const u=B({...e.query,f:"json",...n}),p=Q(u,o),{data:c}=await D(e.path+"/measure",p);return c}async function Bi(s,r,a){const o=await kt(s,r,a);return Ue.fromJSON(o)}async function Qi(s,r,a){const o=await kt(s,r,a);return ve.fromJSON(o)}async function kt(s,r,a){r=V(Ae,r);const o=L(s),e=r.toJSON(),t=B({...o.query,f:"json",...e}),n=Q(t,a),{data:u}=await D(o.path+"/measureFromImage",n);return u}function oe(s){var a;const r=s.toJSON();return(a=s.spatialReference)!=null&&a.imageCoordinateSystem&&(r.spatialReference=dt(s.spatialReference)),r}function dt(s){const{imageCoordinateSystem:r}=s;if(r){const{id:a,referenceServiceName:o}=r;return a!=null?o?{icsid:a,icsns:o}:{icsid:a}:{ics:r}}return s.toJSON()}function qe(s,r){if(!s.imageCoordinateSystem)return vt(s);const a=dt(s),{icsid:o,icsns:e}=a;return o==null||e!=null&&!(r!=null&&r.toLowerCase().includes("/"+e.toLowerCase()+"/"))?JSON.stringify(a):`0:${o}`}async function Hi(s,r,a){r=V(rt,r);const o=L(s),e=r.toJSON();r.outSpatialReference&&(e.outSR=qe(r.outSpatialReference));const t=B({...o.query,f:"json",...e}),n=Q(t,a),{data:u}=await D(o.path+"/queryBoundary",n);return _e.fromJSON(u)}async function ki(s,r,a){var d,h;const o=(r=V(ce,r)).toJSON();Pt(o),(d=o.objectIds)!=null&&d.length&&(o.objectIds=o.objectIds.join(",")),o.geometry||o.objectIds||o.time||o.where||(o.where="1=1");const e=await Ce(r.geometry),t=e==null?void 0:e[0];t!=null&&(o.geometry=oe(t));const n=(t==null?void 0:t.spatialReference)??((h=r.geometry)==null?void 0:h.spatialReference);n&&(o.inSR=qe(n));const u=L(s),p=B({...u.query,f:"json",...o}),c=Q(p,a),{data:m}=await D(`${u.path}/queryGPSInfo`,c);return Le.fromJSON(m)}async function Wi(s,r,a){const o=(r=V(de,r)).toJSON();r.geometry.spatialReference.imageCoordinateSystem&&(o.geometry=oe(r.geometry)),r.depthOffset&&r.adjust||delete o.options;const e=L(s),t=B({...e.query,f:"json",...o}),n=Q(t,a),{data:u}=await D(`${e.path}/imageToMap`,n);return le(u)}async function Zi(s,r,a){var p;const o=(r=V(Te,r)).toJSON();(p=r.rasterIds)!=null&&p.length&&(o.rasterIds=r.rasterIds.join(","));const e=L(s),t=B({...e.query,f:"json",...o}),n=Q(t,a),{data:u}=await D(`${e.path}/imageToMapMultiray`,n);return le(u)}async function Ki(s,r,a){var d;const o=(r=V(je,r)).toJSON(),e=await Ce(r.geometry),t=e==null?void 0:e[0];t!=null&&(o.geometry=oe(t)),r.visibleOnly||delete o.options;const n=(t==null?void 0:t.spatialReference)??((d=r.geometry)==null?void 0:d.spatialReference);n&&(o.inSR=qe(n));const u=L(s),p=B({...u.query,f:"json",...o}),c=Q(p,a),{data:m}=await D(`${u.path}/mapToImage`,c);return le(m)}async function Xi(s,r,a){const o=(r=V(ze,r)).toJSON(),e=L(s),t=B({...e.query,f:"json",...o}),n=Q(t,a),{data:u}=await D(`${e.path}/getImageUrl`,n);return ot.fromJSON(u)}async function Yi(s,r,a){var c;const o=(r=V(we,r)).toJSON(),e=await Ce([r.fromGeometry,r.toGeometry]);e[0]!=null&&(o.fromGeometry=oe(e[0]),e[0].spatialReference&&(o.inSR=qe(e[0].spatialReference))),e[1]!=null&&(o.toGeometry=oe(e[1])),(c=r.objectIds)!=null&&c.length&&(o.objectIds=o.objectIds.join(","));const t=L(s),n=B({...t.query,f:"json",...o}),u=Q(n,a),{data:p}=await D(`${t.path}/find`,u);return et.fromJSON(p)}async function es(s,r,a){var A,I;const o=L(s),e=B({...o==null?void 0:o.query,f:"json"}),t=Q(e,a),n=`${o==null?void 0:o.path}/${r}/info`,u=D(`${n}`,t),p=D(`${n}/keyProperties`,t),c=await Promise.allSettled([u,p]),m=c[0].status==="fulfilled"?c[0].value.data:null,d=c[1].status==="fulfilled"?c[1].value.data:null;let h=null;(A=m.statistics)!=null&&A.length&&(h=m.statistics.map(C=>({min:C[0],max:C[1],avg:C[2],stddev:C[3]})));const y=Be.fromJSON(m.extent),v=Math.ceil(y.width/m.pixelSizeX-.1),g=Math.ceil(y.height/m.pixelSizeY-.1),R=y.spatialReference,w=new E({x:m.pixelSizeX,y:m.pixelSizeY,spatialReference:R}),b=(I=m.histograms)!=null&&I.length?m.histograms:null,f=new ni({origin:m.origin,blockWidth:m.blockWidth,blockHeight:m.blockHeight,firstPyramidLevel:m.firstPyramidLevel,maximumPyramidLevel:m.maxPyramidLevel});return new Gt({width:v,height:g,bandCount:m.bandCount,extent:y,spatialReference:R,pixelSize:w,pixelType:m.pixelType.toLowerCase(),statistics:h,histograms:b,keyProperties:d,storageInfo:f})}const ts=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),rs=ir(lr,{min:0,max:255});function is(s){const r=JSON.stringify(s),a=r.includes('"rasterFunctionDefinition":{'),o=a?r.match(/"type":"(.*?FunctionArguments")/gi):r.match(/"rasterFunction":"(.*?")/gi),e=o==null?void 0:o.map(t=>a?t.slice(8,-18):t.slice(18,-1));return e?e.join("/"):null}const ss=s=>{const r=s;let a=class extends r{constructor(){super(...arguments),this._functionRasterInfos={},this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new _({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,n){e!=null&&this.format!=="lerc"&&(t[n]=e)}writeCompressionTolerance(e,t,n){this.format==="lerc"&&e!=null&&(t[n]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?re.fromJSON(t):null}get fieldsIndex(){return this.fields?new rr(this.fields):null}set format(e){e&&ts.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t!=null&&t.mosaicMethod&&(t=re.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const n=e||t.mosaicRule;return n?re.fromJSON(n):this._isMosaicRuleSupported(t)?re.fromJSON(t):null}writeMosaicRule(e,t,n){const{mosaicRule:u}=this;this._isValidCustomizedMosaicRule(u)&&(t[n]=u.toJSON())}writeNoData(e,t,n){e!=null&&typeof e=="number"&&(t[n]=rs(e))}readObjectIdField(e,t){if(!e){const n=t.fields.find(u=>u.type==="esriFieldTypeOID"||u.type==="oid");e=n==null?void 0:n.name}return e}get parsedUrl(){return sr(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const n=t==null?void 0:t.find(({name:u})=>u===e);return n==null?void 0:n.renderer.clone()}return this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,n){var c,m;const u=(m=(c=t==null?void 0:t.layerDefinition)==null?void 0:c.drawingInfo)==null?void 0:m.renderer,p=Zr(u,n);return p==null?null:(p.type==="vector-field"&&t.symbolTileSize&&!u.symbolTileSize&&(p.symbolTileSize=t.symbolTileSize),Lt(p)||Qe.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),p)}writeRenderer(e,t,n){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){var u,p,c,m;const e=((u=this.fields)==null?void 0:u.map(d=>d.clone()))??[];e.push(jr()),this.sourceType==="mosaic-dataset"&&((p=this.fields)!=null&&p.length)&&e.push(Pr()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:d})=>d.toLowerCase()==="none")&&e.push(Nr()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:d})=>d.toLowerCase()!=="none").forEach(({name:d})=>e.push(Cr(d)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const d=(m=(c=t==null?void 0:t.multidimensionalInfo)==null?void 0:c.variables[0].unit)==null?void 0:m.trim(),h=Or(d),y=_r();e.push(h,y)}if(t!=null&&t.multidimensionalInfo&&this.sourceType==="raster-dataset"){const d=$r(t.multidimensionalInfo);e.push(...d)}const n=t==null?void 0:t.attributeTable;if(n!=null){const d=Mr(n);e.push(...d)}return e}set rasterFunction(e){let t=e;t!=null&&t.rasterFunction&&(t=T.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const n=t.rasterFunctionInfos;return t.renderingRule||n!=null&&n.length&&n[0].name!=="None"?this._isRFTJson(t.renderingRule)?T.fromJSON({rasterFunctionDefinition:t.renderingRule}):T.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const n=e||t.extent.spatialReference;return n?ae.fromJSON(n):null}writePixelType(e,t,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[n]=Ne.toJSON(e))}readVersion(e,t){let n=t.currentVersion;return n||(n=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let n=e;const{renderer:u,symbolizer:p,pixelFilter:c}=this;if(!this._isPicture()&&u&&p&&!c){await this._updateSymbolizer(p,u);const{bandIds:m}=this;n=await this._symbolize({pixelData:e,bandIds:m,symbolizer:p},t)}return n}destroy(){this._shutdownJobHandler()}async calculateVolume(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsCalculateVolume)throw new F("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=q(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),Mi(this.url,e,this._getRequestOptions(t))}async computeAngles(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeAngles)throw new F("imagery-layer:compute-angles","this operation is not supported on the input image service");return Ai(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputePixelLocation)throw new F("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return Vi(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeHistograms)throw new F("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=q(e),this._applyMosaicAndRenderingRules(e),Ei(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeStatisticsHistograms)throw new F("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=q(e),this._applyMosaicAndRenderingRules(e),qi(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new F("imagery-layer:measure-height","this operation is not supported on the input image service");return e=q(e),this._applyMosaicRule(e),Gi(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new F("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=q(e),this._applyMosaicRule(e),Li(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new F("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=q(e),this._applyMosaicRule(e),Ui(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new F("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=q(e),this._applyMosaicRule(e),zi(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new F("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new F("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return Bi(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new F("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new F("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Qi(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t!=null?t.get(e):void 0}getFieldDomain(e,t){const n=this.getField(e);return n?n.domain:null}fetchImage(e,t,n,u={}){if(ar(Qe.getLogger(this),"`ImageryLayer.fetchImage` is deprecated in favor of 'ImageryLayer.fetchPixels'.",{replacement:"ImageryLayer.fetchPixels",version:"4.33",warnOnce:!0}),e==null||t==null||n==null)throw new F("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");return this.internalFetchImage(e,t,n,u)}async internalFetchImage(e,t,n,u={}){this._updateCurrentRasterInfo();const p=this.getExportImageServiceParameters(e,t,n,u.timeExtent);if(p==null){if(u.requestAsImageElement&&this._canRequestImageElement(this.format)){const b=document.createElement("canvas");return b.width=t,b.height=n,u.returnImageBitmap?{imageBitmap:await Ct(b,`${o(this.parsedUrl)}/exportImage`,u.signal)}:{imageOrCanvasElement:b}}const{bandIds:h,rasterInfo:y}=this,v=((h==null?void 0:h.length)||y.bandCount)??0,g=t*n,R=y.pixelType,w=[];for(let b=0;b<v;b++)w.push(ft.createEmptyBand(R,g));return{pixelData:{pixelBlock:new ft({width:t,height:n,pixels:w,mask:new Uint8Array(g),pixelType:R}),extent:e}}}const c=!!u.requestAsImageElement&&!this.pixelFilter,m=c&&!!u.returnImageBitmap,d={imageServiceParameters:p,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:c,returnImageBitmap:m,signal:u.signal};return this._requestArrayBuffer(d)}async fetchPixels(e,t,n,u={}){await this._initJobHandler(),u.applyRendering&&this._updateCurrentRasterInfo();const p=u.applyRendering?void 0:new _({layer:this,requestRawData:!0,interpolation:u.interpolation??"nearest",bandIds:u.bandIds??[]}),c=this.getExportImageServiceParameters(e,t,n,u.timeExtent,p);if(c==null)return{extent:e,pixelBlock:null};delete c.pixelType,delete c.bandIds,delete c.compressionQuality;const m={imageServiceParameters:c,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:!1,returnImageBitmap:!1,signal:u.signal},{pixelData:d}=await this._requestArrayBuffer(m);return d??{extent:e,pixelBlock:null}}fetchKeyProperties(e){return D(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new F("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):D(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>qt.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const n={...t,query:this._getQueryParams()};return es(o(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,t){var Ke,Xe,xe,ge,ue;const{data:n}=await D(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),u=n==null?void 0:n.ics;if(!u)return;let p=null;try{p=(await D(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!(p!=null&&p.spatialReference))return{ics:u,icsToPixelTransform:null,icsExtent:null,northDirection:null};const c=this.version>=10.7?D(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(x=>x.data).catch(()=>({})):{},m=p.spatialReference,d={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[p]}),inSR:vt(m),outSR:"0:"+e},h=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(d),...t}).then(x=>x.data).catch(()=>({})),y=5,v=(p.xmin+p.xmax)/2,g=(p.ymax-p.ymin)/(y+1),R=p.ymin+g,w=[];for(let x=0;x<y;x++)w.push({x:v,y:R+g*x});const b={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:w}),inSR:vt(m),outSR:"0:"+e},f=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(b),...t}).then(x=>x.data).catch(()=>({})),A=await Promise.all([c,h,f]);let I=A[0].ipxf;if(I==null){const x=(Ke=u.geodataXform)==null?void 0:Ke.xf_0;((Xe=x==null?void 0:x.name)==null?void 0:Xe.toLowerCase())==="topup"&&((xe=x==null?void 0:x.coefficients)==null?void 0:xe.length)===6&&(I={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:x.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const C=Be.fromJSON((ue=(ge=A[1])==null?void 0:ge.geometries)==null?void 0:ue[0]);C&&(C.spatialReference=new ae({wkid:0,imageCoordinateSystem:u}));const N=A[2].geometries?A[2].geometries.filter(x=>(x==null?void 0:x.x)!=null&&x.y!=null&&x.x!=="NaN"&&x.y!=="NaN"):[],z=N.length;if(z<3)return{ics:u,icsToPixelTransform:I,icsExtent:C,northDirection:null};let J=0,$=0,O=0,G=0;for(let x=0;x<z;x++)J+=N[x].x,$+=N[x].y,O+=N[x].x*N[x].x,G+=N[x].x*N[x].y;const k=(z*G-J*$)/(z*O-J*J);let fe=0;const Ie=N[y-1].x>N[0].x,Ee=N[y-1].y>N[0].y;return k===1/0?fe=Ee?90:270:k===0?fe=Ie?0:180:k>0?fe=Ie?180*Math.atan(k)/Math.PI:180*Math.atan(k)/Math.PI+180:k<0&&(fe=Ee?180+180*Math.atan(k)/Math.PI:360+180*Math.atan(k)/Math.PI),{ics:u,icsToPixelTransform:I,icsExtent:C,northDirection:fe}}async generateRasterInfo(e,t){var c;e=V(T,e);const n={...t,query:this._getQueryParams()};if(!e||((c=e.functionName)==null?void 0:c.toLowerCase())==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??Ot(o(this.parsedUrl),this.sourceJSON,n);const u=is(e);if(!u)throw new F("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[u])return this._functionRasterInfos[u];const p=pi(o(this.parsedUrl),e,n);this._functionRasterInfos[u]=p;try{return await p}catch(m){throw this._functionRasterInfos[u]=null,m}}getExportImageServiceParameters(e,t,n,u,p){var f,A;e=e.clone().shiftCentralMeridian();const c=qe(e.spatialReference,o(this.parsedUrl));p??(p=this.exportImageServiceParameters);const m=p.toJSON(),{bandIds:d,noData:h}=m;let{renderingRule:y}=m;const v=(f=this.rasterFunction)==null?void 0:f.rasterFunctionDefinition,g=(A=this.renderer)==null?void 0:A.type,R=!g||g==="raster-stretch"||g==="raster-colormap"||g==="unique-value"||g==="class-breaks"||g==="raster-shaded-relief";if(d!=null&&d.length&&this._hasRasterFunction(this.rasterFunction)&&!v&&R){const I={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:d}};if(y.rasterFunction==="Stretch")I.rasterFunctionArguments.Raster=y.rasterFunctionArguments.Raster,y.rasterFunctionArguments.Raster=I;else if(y.rasterFunction==="Colormap"){const C=y.rasterFunctionArguments.Raster;(C==null?void 0:C.rasterFunction)==="Stretch"?(I.rasterFunctionArguments.Raster=C.rasterFunctionArguments.Raster,C.rasterFunctionArguments.Raster=I):(I.rasterFunctionArguments.Raster=C,y.rasterFunctionArguments.Raster=I)}else I.rasterFunctionArguments.Raster=y,y=I;m.bandIds=void 0}else m.bandIds=d==null?void 0:d.join(",");Array.isArray(h)&&h.length>0&&(m.noData=h.join(","));const w=this._processMultidimensionalIntersection(null,u,p.mosaicRule);if(w.isOutSide)return null;m.mosaicRule=w.mosaicRule!=null?JSON.stringify(w.mosaicRule):null,u=w.timeExtent,m.renderingRule=this._getRenderingRuleString(T.fromJSON(y));const b={};if(u!=null){const{start:I,end:C}=u.toJSON();I&&C&&I===C?b.time=""+I:I==null&&C==null||(b.time=`${I??"null"},${C??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:c,imageSR:c,size:t+","+n,...m,...b}}async getSamples(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n!=null&&n.operations.supportsGetSamples))throw new F("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=q(e);const{raster:u}=this;return u&&e.raster==null&&(e.raster=u),Ji(this.url,e,this._getRequestOptions(t))}async identify(e,t){var c;if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsIdentify)throw new F("imagery-layer:identify","identify operation is not supported on the input image service");e=q(e),this.version<10.91&&((c=e.geometry)==null?void 0:c.type)==="extent"&&(e.geometry=wt.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new F("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:u,rasterFunction:p}=this;return p&&e.rasterFunction==null&&(e.rasterFunction=p),u&&e.raster==null&&(e.raster=u),Mt(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMap)throw new F("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Wi(o(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMapMultiray)throw new F("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Zi(o(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMapToImage)throw new F("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Ki(o(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsFindImages)throw new F("imagery-layer:find-images","findImages operation is not supported on the input image service");return Yi(o(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsGetImageUrl)throw new F("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Xi(o(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new yt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryBoundary)throw new F("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},Hi(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),hi(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),di(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryGPSInfo)throw new F("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},ki(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),yi(this.url,e,t)}async queryVisibleRasters(e,t){var C,N,z,J;if(!e)throw new F("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:u,returnTopmostRaster:p,showNoDataRecords:c}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,d=null,h=null;const y=Pe.servicePixelValue.toLowerCase(),v=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some($=>!$.toLowerCase().startsWith(y)),this.version>=10.4)){const $=e.outFields.filter(G=>G.toLowerCase().startsWith(y)&&G.length>y.length).map(G=>{const k=G.slice(y.length+1);return[this._updateRenderingRulesFunctionName(k,v),k]});d=$.map(G=>new T({functionName:G[0]})),h=$.map(G=>G[1]);const{rasterFunction:O}=this;d.length===0?O!=null&&O.functionName?(d.push(O),h.push(O.functionName)):d=null:O!=null&&O.functionName&&!d.some(G=>G.functionName===O.functionName)&&(d.push(O),h.push(O.functionName))}const g=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:R}=this;let w=e.timeExtent||this.timeExtent;if(R){const{isOutside:$,intersection:O}=ht(R,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:(C=this.exportImageServiceParameters.mosaicRule)==null?void 0:C.multidimensionalDefinition});if($)throw new F("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");(O==null?void 0:O.timeExtent)!=null&&(w=O.timeExtent)}const b=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,w);let f=e.geometry;this.version<10.91&&(f==null?void 0:f.type)==="extent"&&(f=wt.fromExtent(f));const A=this._getQueryParams({geometry:f,timeExtent:w,mosaicRule:b,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:d,pixelSize:n,returnCatalogItems:m,returnGeometry:g,raster:this.raster,maxItemCount:p?1:null});delete A.f;const I=new M(A);try{await this._generateRasterInfo(this.rasterFunction);const $=await Mt(this.url,I,{signal:t==null?void 0:t.signal,query:{...this.customParameters}}),O=e.outFields,G=$.value!=null&&$.value.toLowerCase().includes("nodata"),k=m&&!g&&((N=$==null?void 0:$.catalogItems)==null?void 0:N.features.length)&&(c||!G),fe=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?Ar({rasterInfo:this.rasterInfo,multidimensionalDefinition:b==null?void 0:b.multidimensionalDefinition,timeExtent:w,multidimensionalSubset:this.multidimensionalSubset}):null;if(!k)return this._processVisibleRastersResponse($,{returnDomainValues:u,templateRRFunctionNames:h,showNoDataRecords:c,templateFields:O,effectiveMultidimensionalDefinition:fe});const Ie=this.objectIdField||"ObjectId",Ee=((z=$.catalogItems)==null?void 0:z.features)??[],Ke=Ee.map(ge=>{var ue;return(ue=ge.attributes)==null?void 0:ue[Ie]}),Xe=new yt({objectIds:Ke,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[Ie]}),xe=await this.queryRasters(Xe);return(J=xe==null?void 0:xe.features)!=null&&J.length&&xe.features.forEach(ge=>{Ee.forEach(ue=>{ue.attributes[Ie]===ge.attributes[Ie]&&ge.geometry&&(ue.geometry=ge.geometry.clone(),e.outSpatialReference!=null&&(ue.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse($,{returnDomainValues:u,templateRRFunctionNames:h,showNoDataRecords:c,templateFields:O,effectiveMultidimensionalDefinition:fe})}catch{throw new F("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const n=D(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>{var m;return(m=c.data)==null?void 0:m.statistics}),u=D(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(c=>{var m;return(m=c.data)==null?void 0:m.histograms}),p=await Promise.all([n,u]);return p[0]&&p[0].forEach(c=>{c.avg=c.mean,c.stddev=c.standardDeviation}),{statistics:p[0]||null,histograms:p[1]||null}}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Vr(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Ot(o(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(c=>(this._set("serviceRasterInfo",c),this._set("multidimensionalInfo",c.multidimensionalInfo),ci(c,t),c)),u=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,p=this._getRasterFunctionInfos();return Promise.all([n,u,p]).then(c=>{c[1]?this._set("rasterInfo",c[1]):this._set("rasterInfo",c[0]),c[2]&&this._set("rasterFunctionInfos",c[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),Qe.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([nr(()=>this.rasterFunction,d=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(d).then(h=>{h&&(this.rasterInfo=h)})})]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)})}_combineMosaicRuleWithTimeExtent(e,t){var R;const n=this.timeInfo,{multidimensionalInfo:u}=this.serviceRasterInfo;if(e==null||u==null||t==null||(n==null?void 0:n.startField)==null)return e;const{startField:p}=n,c=u.variables.some(w=>w.dimensions.some(b=>b.name===p))?p:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=(R=e.multidimensionalDefinition)==null?void 0:R.filter(w=>w.dimensionName!==c),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const m=e.multidimensionalDefinition.filter(w=>w.dimensionName===c),d=t.start!=null?t.start.getTime():null,h=t.end!=null?t.end.getTime():null,y=d==null||h==null||d===h,v=y?[d||h]:[[d,h]],g=this.version>=10.8;if(m.length)m.forEach(w=>{w.dimensionName===c&&(g?(w.dimensionName=null,w.isSlice=!1,w.values=[]):(w.isSlice=y,w.values=v))});else if(!g){const w=e.multidimensionalDefinition.filter(b=>b.variableName!=null&&b.dimensionName==null);w.length?w.forEach(b=>{b.dimensionName=c,b.isSlice=y,b.values=v}):e.multidimensionalDefinition.push(new qr({variableName:"",dimensionName:c,isSlice:y,values:v}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQuery)throw new F("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?V(yt,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&(t==null?void 0:t.bandCount)===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Kr(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var n;let t=this.sourceJSON;if(!t){const{data:u,ssl:p}=await D(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=u,this.sourceJSON=t,p&&(this.url=this.url.replace(/^http:/i,"https:"))}if(((n=t.capabilities)==null?void 0:n.toLowerCase().split(",").map(u=>u.trim()).indexOf("tilesonly"))>-1)throw new F("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":((t=e.fields)==null?void 0:t.length)>0}_isMosaicRuleSupported(e){var u;if(!e)return!1;const t=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(((u=e.fields)==null?void 0:u.length)>1);return t||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:n}=e,u=(t==null?void 0:t.toLowerCase())==="resample",p=(n==null?void 0:n.ResampleType)||(n==null?void 0:n.resampleType);return u&&(p===7||p===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){var u,p,c;const t=this._isPicture(),{rasterInfo:n}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const m=(p=(u=this.mosaicRule)==null?void 0:u.multidimensionalDefinition)==null?void 0:p[0].variableName,d=Xr({variableName:m,rasterFunctionName:(c=this.rasterFunction)==null?void 0:c.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const y=(d==null?void 0:d.bandIds)??Yr(n);!y||n.bandCount===3&&y[0]===0&&y[1]===1&&y[2]===2||(this.bandIds=y)}e||(e=(d==null?void 0:d.renderer)??ei(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:m}));const h=ti(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=h,this.symbolizer.rasterInfo=n):this.symbolizer=new oi({rendererJSON:h,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){(e==null?void 0:e.renderingRule)!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:n}=this;return{raster:t,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e==null?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,n){return this._rasterJobHandler?this._rasterJobHandler.decode({data:e,options:t}):Nt(e,t,n)}async _getRasterFunctionInfos(e){var n;const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(n=(await D(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data)==null?void 0:n.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:n,returnImageBitmap:u,signal:p}=e;if(n&&this._canRequestImageElement(t.format)){const R=`${o(this.parsedUrl)}/exportImage`,{data:w}=await D(R,{responseType:u?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:p});return w instanceof Blob?{imageBitmap:await Ct(w,R,p),params:t}:{imageOrCanvasElement:w,params:t}}const c=this._initJobHandler(),m=D(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:p}),d=(await Promise.all([m,c]))[0].data,h=t.format||"jpgpng";let y=h;if(y!=="bsq"&&y!=="bip"&&(y=li(d)),!y)throw new F("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(d)));const v={signal:p};return{pixelData:{pixelBlock:await(h==="gif"||h==="bmp"||h.includes("png")&&(y==="png"||y==="jpg")?Nt(d,{useCanvas:!0,...t},v):this._decodePixelBlock(d,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:h},v)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){var t;return e&&JSON.stringify(e.toJSON())!==JSON.stringify((t=this.defaultMosaicRule)==null?void 0:t.toJSON())}_updateMultidimensionalDefinition(e){var n;if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Er(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new re;const u=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&((n=this.rasterFunction.functionName)==null?void 0:n.toLowerCase())!=="none"&&t.forEach(p=>p.variableName=""),t=t.filter(({variableName:p,dimensionName:c})=>p&&p!=="*"||c),!(u!=null&&u.length)&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){var A,I,C;t=t||{};const n=e.value,{templateRRFunctionNames:u,showNoDataRecords:p,returnDomainValues:c,templateFields:m}=t,d=e.processedValues;let h=(A=e.catalogItems)==null?void 0:A.features,y=((C=(I=e.properties)==null?void 0:I.Values)==null?void 0:C.map(N=>N.replaceAll(/ /gi,", ")))||[];const v=this.objectIdField||"ObjectId",g=typeof n=="string"&&n.toLowerCase().includes("nodata"),R=[];if(n&&!h&&(!g||p)){const N={};N[v]=0,y=[n],h=[new or({geometry:this.fullExtent,attributes:N})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&Jr(this.rasterFields,N,t.effectiveMultidimensionalDefinition)}if(!h)return[];this._updateResponseFieldNames(h,m),g&&!p&&(h=[]);const{itemPixelValue:w,servicePixelValue:b}=Pe,f=this.rasterFields.some(N=>N.name===w);for(let N=0;N<h.length;N++){const z=h[N];if(n!=null){const J=y[N],$=this.rasterFunction&&d&&d.length>0&&u&&u.length>0&&u.includes(this.rasterFunction.functionName)?d[u.indexOf(this.rasterFunction.functionName)]:n;if(J.toLowerCase()==="nodata"&&!p)continue;f&&(z.attributes[w]=J),z.attributes[b]=$,this._updateFeatureWithMagDirValues(z,J);const O=this.fields&&this.fields.length>0;let G=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?O?J:n:$;this.rasterFunction||(G=O?J:n),this._updateFeatureWithRasterAttributeTableValues(z,G)}if(z.sourceLayer=z.layer=this,c&&this._updateFeatureWithDomainValues(z),u&&d&&u.length===d.length)for(let J=0;J<u.length;J++){const $=`${Pe.servicePixelValue}.${u[J]}`;z.attributes[$]=d[J]}R.push(h[N])}return R}_processMultidimensionalIntersection(e,t,n){const{multidimensionalSubset:u}=this;if(!u)return{isOutSide:!1,timeExtent:t,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,t)};if(u){const{isOutside:p,intersection:c}=ht(u,{geometry:e,timeExtent:t});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null};(c==null?void 0:c.timeExtent)!=null&&(t=c.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,t),n==null?void 0:n.multidimensionalDefinition){const{isOutside:p}=ht(u,{multidimensionalDefinition:n.multidimensionalDefinition});if(p)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,t){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:u,fields:p}=n,c=p.map(d=>d.name).find(d=>d.toLowerCase()==="value");if(!c)return;const m=u.filter(d=>d.attributes[c]===(t!=null?parseInt(t,10):null));m&&m[0]&&p.forEach(d=>{const h=Gr+d.name;e.attributes[h]=m[0].attributes[d.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const n=t.split(/,\s*/).map(d=>parseFloat(d)),u=n.map(d=>[d]),p=n.map(d=>({minValue:d,maxValue:d,noDataValue:null})),c=new ft({height:1,width:1,pixelType:"f32",pixels:u,statistics:p});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:c,extent:new Be(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[c.pixels[0][0],c.pixels[1][0]]:ui([c.pixels[0][0],c.pixels[1][0]]);e.attributes[Pe.magnitude]=m[0],e.attributes[Pe.direction]=m[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value");t!=null&&t.forEach(n=>{const u=e.attributes[n.name];if(u!=null){const p=n.domain.codedValues.find(c=>c.code===u);p&&(e.attributes[n.name]=p.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(u=>{var p;if(u!=null&&u.attributes)for(const c of t){const m=(p=n.get(c))==null?void 0:p.name;m&&m!==c&&(u.attributes[c]=u.attributes[m],delete u.attributes[m])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return(e==null?void 0:e.functionName)!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(n)?t.get(n):e}_isRFTJson(e){return(e==null?void 0:e.name)&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:n,rasterFunction:u}=this;u&&e.rasterFunction==null&&(e.rasterFunction=u),n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}async _updateCurrentRasterInfo(e){if(this.renderer||this.symbolizer){const t=await this._generateRasterInfo(this.rasterFunction,{signal:e});t&&(this.rasterInfo=t)}}_applyMosaicRule(e){const{raster:t,mosaicRule:n}=this;n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){var A;const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(I=>I.trim()):["image","catalog"],{currentVersion:n,maxRecordCount:u}=e,p=t.includes("image"),c=e.serviceDataType==="esriImageServiceDataTypeElevation",m=!(!e.spatialReference&&!((A=e.extent)!=null&&A.spatialReference)),d=t.includes("edit"),h=t.includes("mensuration")&&m,y=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(I=>I.trim()),v=h&&y.includes("basic"),g=this._isMosaicDataset(e)&&t.includes("catalog"),R=t.includes("download"),w=n>=10.7&&c||n>=11.4&&(c||h&&y.includes("3d")),b=g&&e.fields&&e.fields.length>0,f=b&&e.supportsAdvancedQueries?e.advancedQueryCapabilities:void 0;return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsImageToMap:n>=11.2&&g,supportsImageToMapMultiray:n>=11.2&&g,supportsMapToImage:n>=11.2&&g,supportsFindImages:n>=11.2&&g,supportsGetImageUrl:n>=11.3&&R,supportsMeasure:h,supportsMeasureFromImage:n>=11.2,supportsDownload:R,supportsQuery:b,supportsGetSamples:n>=10.2&&p,supportsProject:n>=10.3&&p,supportsComputeStatisticsHistograms:n>=10.4&&p,supportsQueryBoundary:n>=10.6&&p,supportsCalculateVolume:w,supportsComputePixelLocation:n>=10.7&&g,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&g,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,maxUniqueIDCount:void 0,supportsStatistics:!!(f!=null&&f.supportsStatistics),supportsOrderBy:!!(f!=null&&f.supportsOrderBy),supportsDistinct:!!(f!=null&&f.supportsDistinct),supportsPagination:!!(f!=null&&f.supportsPagination),supportsPaginationOnAggregatedQueries:!!(f!=null&&f.supportsPaginationOnAggregatedQueries),supportsStandardizedQueriesOnly:!!(f!=null&&f.useStandardizedQueries),supportsPercentileStatistics:!!(f!=null&&f.supportsPercentileStatistics),supportsCentroid:!!(f!=null&&f.supportsReturningGeometryCentroid),supportsCurrentUser:!1,supportsDistance:!!(f!=null&&f.supportsQueryWithDistance),supportsExtent:!!(f!=null&&f.supportsReturningQueryExtent),supportsGeometryProperties:!!(f!=null&&f.supportsReturningGeometryProperties),supportsHavingClause:!!(f!=null&&f.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:(f==null?void 0:f.supportsSqlExpression)??!!f,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!(f!=null&&f.supportsDefaultSR),supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:v,supportsAreaAndPerimeter:v,supportsPointOrCentroid:v,supportsHeightFromBaseAndTop:h&&y.includes("base-top height"),supportsHeightFromBaseAndTopShadow:h&&y.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:h&&y.includes("top-top shadow height"),supports3D:h&&y.includes("3d")}}}};function o(e){return(e==null?void 0:e.path)??""}return i([l({clonable:!1})],a.prototype,"_functionRasterInfos",void 0),i([l({readOnly:!0})],a.prototype,"_serviceSupportsMosaicRule",void 0),i([U("_serviceSupportsMosaicRule",["currentVersion","fields"])],a.prototype,"readServiceSupportsMosaicRule",null),i([l({readOnly:!0})],a.prototype,"_rasterFunctionNamesIndex",null),i([l()],a.prototype,"adjustAspectRatio",void 0),i([l({type:[Ze],json:{write:!0}})],a.prototype,"bandIds",void 0),i([U("bandIds")],a.prototype,"readBandIds",null),i([l({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),i([U("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),i([l({type:Number})],a.prototype,"compressionQuality",void 0),i([j("compressionQuality")],a.prototype,"writeCompressionQuality",null),i([l({type:Number})],a.prototype,"compressionTolerance",void 0),i([j("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),i([l({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),i([l({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],a.prototype,"defaultMosaicRule",void 0),i([U("defaultMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultMosaicRule",null),i([l({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),i([l({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),i([l()],a.prototype,"rasterInfo",void 0),i([l({readOnly:!0,type:[Yt]})],a.prototype,"fields",void 0),i([l({readOnly:!0})],a.prototype,"fieldsIndex",null),i([l({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],a.prototype,"format",null),i([U("service","format",["serviceDataType"])],a.prototype,"readFormat",null),i([l({type:Be})],a.prototype,"fullExtent",void 0),i([l({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),i([l({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),i([l({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),i([l({type:String,json:{type:He.jsonValues,read:He.read,write:He.write}})],a.prototype,"interpolation",void 0),i([l()],a.prototype,"minScale",void 0),i([U("service","minScale")],a.prototype,"readMinScale",null),i([l()],a.prototype,"maxScale",void 0),i([U("service","maxScale")],a.prototype,"readMaxScale",null),i([l({type:re})],a.prototype,"mosaicRule",null),i([U("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),i([j("mosaicRule")],a.prototype,"writeMosaicRule",null),i([l()],a.prototype,"multidimensionalInfo",void 0),i([l({type:Hr,json:{write:!0}})],a.prototype,"multidimensionalSubset",void 0),i([l({json:{type:Ze}})],a.prototype,"noData",void 0),i([j("noData")],a.prototype,"writeNoData",null),i([l({type:String,json:{type:ke.jsonValues,read:ke.read,write:ke.write}})],a.prototype,"noDataInterpretation",void 0),i([l({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),i([U("objectIdField")],a.prototype,"readObjectIdField",null),i([l({readOnly:!0})],a.prototype,"geometryType",void 0),i([l({})],a.prototype,"typeIdField",void 0),i([l({})],a.prototype,"types",void 0),i([l({readOnly:!0})],a.prototype,"parsedUrl",null),i([l({type:Function})],a.prototype,"pixelFilter",void 0),i([l()],a.prototype,"raster",void 0),i([l({readOnly:!0})],a.prototype,"sourceType",void 0),i([U("sourceType",["serviceSourceType","fields"])],a.prototype,"readSourceType",null),i([l()],a.prototype,"viewId",void 0),i([l()],a.prototype,"renderer",null),i([l({types:Wr,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:kr,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],a.prototype,"internalRenderer",null),i([U("internalRenderer")],a.prototype,"readRenderer",null),i([j("internalRenderer")],a.prototype,"writeRenderer",null),i([l({clonable:!1})],a.prototype,"symbolizer",void 0),i([l(er)],a.prototype,"opacity",void 0),i([l({readOnly:!0})],a.prototype,"rasterFields",null),i([l({constructOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),i([l({type:T,json:{name:"renderingRule"}})],a.prototype,"rasterFunction",null),i([U("rasterFunction",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRasterFunction",null),i([l({readOnly:!0})],a.prototype,"serviceDataType",void 0),i([l({readOnly:!0,type:ae})],a.prototype,"spatialReference",void 0),i([U("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),i([l({type:Ne.apiValues,json:{read:Ne.read,type:Ne.jsonValues}})],a.prototype,"pixelType",void 0),i([j("pixelType")],a.prototype,"writePixelType",null),i([l({constructOnly:!0,type:Gt})],a.prototype,"serviceRasterInfo",void 0),i([l()],a.prototype,"sourceJSON",void 0),i([l(tr)],a.prototype,"url",void 0),i([l({readOnly:!0})],a.prototype,"version",void 0),i([U("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=i([S("esri.layers.mixins.ArcGISImageService")],a),a};let H=class extends ur(pr(cr(mr(dr(mi(ss(ri(yr(hr(fr(gr(he.ClonableMixin(wr))))))))))))){constructor(...s){super(...s),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=vr(async(r,a,o)=>{const{save:e,saveAs:t}=await Rr(()=>import("./imageryUtils-DVG33d0S.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(r){case Ye.SAVE:return e(this,a);case Ye.SAVE_AS:return t(this,o,a)}})}normalizeCtorArgs(s,r){return typeof s=="string"?{url:s,...r}:s}load(s){const r=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(br).then(()=>this._fetchService(r))),Promise.resolve(this)}set elevationInfo(s){this._set("elevationInfo",s),this._validateElevationInfo()}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(s){this._set("legendEnabled",s)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(s){this._set("listMode",s)}writeOperationalLayerType(s,r,a){var e;const o=((e=this.renderer)==null?void 0:e.type)==="vector-field";r[a]=o?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){var s;return!(!this.raster||!((s=this.url)!=null&&s.toLowerCase().includes("/rasterrendering/imageserver")))}createPopupTemplate(s){const{rasterFields:r}=this,a=new Set,o=Pe.itemPixelValue.toLowerCase(),e=this.sourceType==="raster-dataset",t=Lr.toLowerCase(),n=`${Pe.servicePixelValue.toLowerCase()}.`;for(const c of r){const m=c.name.toLowerCase();m===o||m.startsWith(n)||e&&m.startsWith(t)||a.add(c.name)}const u=Sr({fields:r,title:this.title},{...s,visibleFieldNames:a}),{rasterInfo:p}=this;return u!=null&&u.fieldInfos&&p&&zr(u.fieldInfos,p),u}queryFeatures(s,r){return this.queryRasters(s,r).then(a=>{if(a!=null&&a.features)for(const o of a.features)o.layer=o.sourceLayer=this;return a})}queryFeatureCount(s,r){return this.queryRasterCount(s,r)}redraw(){this.emit("redraw")}async save(s){return this._debouncedSaveOperations(Ye.SAVE,s)}async saveAs(s,r){return this._debouncedSaveOperations(Ye.SAVE_AS,r,s)}serviceSupportsSpatialReference(s){return Ir(this,s)}write(s,r){if(!this._isPreviewLayer)return super.write(s,r);if(r!=null&&r.messages){const a=`${r.origin}/${r.layerContainerType||"operational-layers"}`;r.messages.push(new F("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}_validateElevationInfo(){const s=this.elevationInfo;_t(Qe.getLogger(this),fi("Imagery layers","relative-to-scene",s)),_t(Qe.getLogger(this),gi("Imagery layers",s))}};i([l({type:xr,value:null,json:{read:!1}})],H.prototype,"elevationInfo",null),i([l(Fr)],H.prototype,"legendEnabled",null),i([l({type:["show","hide"]})],H.prototype,"listMode",null),i([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],H.prototype,"isReference",void 0),i([l({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],H.prototype,"operationalLayerType",void 0),i([j("web-map","operationalLayerType")],H.prototype,"writeOperationalLayerType",null),i([l(Dr)],H.prototype,"popupEnabled",void 0),i([l({type:Tr,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],H.prototype,"popupTemplate",void 0),i([l({readOnly:!0})],H.prototype,"defaultPopupTemplate",null),i([l({readOnly:!0,json:{read:!1}})],H.prototype,"type",void 0),i([l({readOnly:!0})],H.prototype,"_isPreviewLayer",null),H=i([S("esri.layers.ImageryLayer")],H);const Qs=H;export{Qs as default};
