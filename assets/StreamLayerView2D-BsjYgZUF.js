import{ar as s,as as a,hG as _,at as m,a3 as u,s as h,hE as g,c3 as f,aL as d,fK as v}from"./index-Btyj_e22.js";import{n as S,l as C}from"./FeatureLayerView2D-FpJbDpCl.js";import"./featureConversionUtils-3V6t1IaM.js";import"./OptimizedFeature-Bd9Ncgqr.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-fsVsd3eo.js";import"./AttributeBinsFeatureSet-DTr5WwfZ.js";import"./AttributeBinsQuery-BNJ1eaiH.js";import"./queryUtils-CrxIK-y_.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-CBsXBMic.js";import"./LayerView-zTmvCAJ1.js";import"./Container-CSbQovvF.js";import"./TechniqueInstance-CWk3ooPV.js";import"./UpdateTracking2D-Cn29psoB.js";import"./Utils-C9fv26Zt.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CqAHZCWA.js";import"./ProgramTemplate-uxhqcgRI.js";import"./TileContainer-BaZ-5CFi.js";import"./WGLContainer-Beai6YF6.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CHGqOOZH.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-D3iWA-8t.js";import"./TechniqueType-CFPo0AVB.js";import"./GraphShaderModule-lmeYV97K.js";import"./ShaderBuilder-Cpl7q9Oj.js";import"./BindType-BBwFZqyN.js";import"./utils-CcYokxyU.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-D8t1B8KS.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-CfDF8Uk3.js";import"./constants-B4mRqufT.js";import"./bundle-D2hyHz7d.js";import"./popupUtils-8Qptwq56.js";import"./RefreshableLayerView-Dlf-c_Vy.js";const I=e=>{const r=e;let t=class extends r{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...i){super(...i),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(i){i?this._doPause():this._isUserPaused||this._doResume()}};return s([a()],t.prototype,"_isUserPaused",void 0),s([a({readOnly:!0})],t.prototype,"connectionStatus",null),s([a({type:_})],t.prototype,"filter",void 0),t=s([m("esri.views.layers.StreamLayerView")],t),t};let o=class extends I(C){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u(()=>this.layer.customParameters,async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)}),this.layer.on("send-message-to-socket",async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)}),this.layer.on("send-message-to-client",async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),u(()=>this.layer.purgeOptions,()=>this._update()),u(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,r){if(Array.isArray(e))return g(e.map(n=>this.on(n,r)));const t=["data-received","message-received"].includes(e);t&&this.getWorker().then(n=>n.streamMessenger.enableEvent(e,!0));const i=super.on(e,r),p=this;return f(()=>{i.remove(),t&&(p._workerProxy.closed||p.hasEventListener(e)||p.getWorker().then(n=>n.streamMessenger.enableEvent(e,!1)))})}async queryLatestObservations(e,r){var i,p,n;if(!((i=this.layer.timeInfo)!=null&&i.endField||(p=this.layer.timeInfo)!=null&&p.startField||(n=this.layer.timeInfo)!=null&&n.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const t=await this.getWorker();return S(t.features.executeQueryForLatestObservations(this._cleanUpQuery(e),r).then(y=>{const l=d.fromJSON(y);return l.features.forEach(c=>{c.layer=this.layer,c.sourceLayer=this.layer}),l}),new d({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,r){return(await super.queryObjectIds(e,r)).filter(v)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then(e=>e.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(e=>e.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(e=>e.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),r=this;return{...e,get container(){return r.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};s([a()],o.prototype,"pipelineConnectionStatus",void 0),s([a()],o.prototype,"pipelineErrorString",void 0),s([a({readOnly:!0})],o.prototype,"connectionError",null),s([a({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([m("esri.views.2d.layers.StreamLayerView2D")],o);const ue=o;export{ue as default};
