const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-DVG33d0S.js","assets/utils-CzVjxagd.js","assets/index-BU6th8yW.js","assets/index-IYDF6MEx.css","assets/originUtils-DrfbVDlU.js","assets/saveUtils-CkdCsJRp.js","assets/rasterFieldUtils-DWgFJiUL.js"])))=>i.map(i=>d[i]);
import{ao as A,ae as W,ep as Be,ps as Le,gU as Je,ar as R,as as O,at as Y,cZ as ke,s as C,aL as Me,L as Se,pt as ze,a4 as Ue,bU as He,b$ as ne,bF as je,M as Ge,av as V,am as Q,ec as We,ed as qe,eE as Ve,eF as Ye,eJ as Xe,eC as Ke,eD as Ze,eH as Qe,eG as et,aN as tt,ee as st,a2 as at,_ as it,eL as ae,al as rt,iK as nt,cA as ot,a3 as lt,ef as ct,gc as ut,dH as ft,db as Te}from"./index-BU6th8yW.js";import{$ as Z,i as he,t as U,n as Pe,e as L,o as q,u as ie,X as ht,m as pt}from"./xmlUtilities-CbX31ik8.js";import{d as dt,N as $e}from"./RasterJobHandlerMixin-CyI2K-B9.js";import{c as mt,f as gt,o as yt}from"./RasterPresetRendererMixin-DgukVtIG.js";import{p as wt,N as xt,o as It,c as vt,e as bt,j as St,$ as Tt,b as Rt,k as _t,l as Ot,r as Ct,t as Ft}from"./rasterFieldUtils-DWgFJiUL.js";import{c as oe,E as kt,W as Mt,v as Pt}from"./dataUtils-DJy9wk1Y.js";import{m as ce,M as $t,x as Ne,k as we,P as Nt,l as xe,r as Et,b as Re,H as Dt,G as At,v as Bt,e as _e,Y as Lt,t as Jt,N as Oe,C as zt,c as Ut}from"./RasterSymbolizer-CUGvKudl.js";import{m as Ie,n as Ht}from"./PolynomialTransform-Dnrftiby.js";import{T as jt}from"./TilemapCache-BA4W_aJS.js";import{w as Gt,T as Wt}from"./rasterFunctionHelper-CMuiz65G.js";import{$ as Ce,P as qt,w as Vt}from"./elevationInfoUtils-B4rQxazr.js";import"./QueueProcessor-BzM1hyhR.js";import"./RawBlockCache-CnyTOcLk.js";import"./rasterProjectionHelper-CHwr6msM.js";import"./clipUtils-Dykl9YJJ.js";import"./ClassBreaksDefinition-jtMO-UkI.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./ByteSizeUnit-BsxeN7wM.js";function Ee(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function De(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function Yt(t){const{axes:e}=t.domain,s=Object.keys(e),a=[],i=[];let r=-1,n=-1,u=[];for(let y=0;y<s.length;y++){const v=s[y];Ee(v)?r=y:De(v)&&(n=y);const x=e[v],b=[];if("values"in x){x.values.forEach(S=>b.push(typeof S=="string"?new Date(S).getTime():S));const T=b[1]-b[0];a.push([b[0]-.5*T,b[b.length-1]+.5*T]),i.push(T)}else{const{start:T,stop:S,num:k}=x,I=(S-T)/(k-1);a.push([T-.5*I,S+.5*I]),i.push(I);for(let F=0;F<k;F++)b.push(T+I*F)}u.push({name:v,values:b,extent:[b[0],b[b.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),u=u.filter((y,v)=>!(v===r||v===n));const{referencing:o}=t.domain,l=o.find(y=>y.coordinates.includes(s[r])).system.id,c=l==null?void 0:l.slice(l.lastIndexOf("/")+1),f=c==null||c==="CRS84"?4326:Number(c),h=new A({wkid:f}),[p,w]=a[r],[m,d]=a[n],g=new W({xmin:p,xmax:w,ymin:m,ymax:d,spatialReference:h});return{width:Math.round(g.width/i[r]),height:Math.round(g.height/i[n]),extent:g,dimensions:u}}function pe(t){const e=Je();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function de(){return Math.round(255*Math.random())}function Xt(t){var a,i;const e={},{parameters:s}=t;if(!s)return e;for(const[r,n]of Object.entries(s)){const{type:u,description:o,unit:l,categoryEncoding:c,observedProperty:f}=n;if(u==="Parameter"&&(e[r]={},o&&(e[r].description=pe(o)),l&&(e[r].unit=l.label?pe(l.label):null,e[r].symbol=(a=l.symbol)==null?void 0:a.value),c)){const h=Object.entries(c).map((m,d)=>({OID:d,Value:Number(m[1]),ClassName:m[0].slice(m[0].lastIndexOf("/")+1),Count:1}));let p=!1;(i=f==null?void 0:f.categories)!=null&&i.length&&(f.categories.forEach(m=>{if(!m.id)return;const d=m.id.slice(m.id.lastIndexOf("/")+1),g=h.find(v=>v.ClassName===d);if(!g)return;const y=m.label?pe(m.label):null;if(g.Label=y,m.preferredColor){const v=Be.fromHex(m.preferredColor);v&&(p=!0,g.Red=v.r,g.Green=v.g,g.Blue=v.b)}}),p&&h.forEach(m=>{m.Red==null&&(m.Red=de(),m.Green=de(),m.Blue=de())}));const w={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:h.map(m=>({attributes:m}))};p&&w.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[r].attributeTable=w}}return e}function Kt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let a=0;a<t.length;a++){const i=t[a];i!=null&&(i<e&&(e=i),i>s&&(s=i))}return Le(e,s)}function Zt(t,e,s){const a=t.map((o,l)=>({name:o,count:e[l]})).sort((o,l)=>o.name>l.name?-1:1),i=(r=1,o=>r*=o.count);var r;const n=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let u=0;for(let o=t.length-1;o>=0;o--)u+=n[a.findIndex(({name:l})=>l===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return u}function Qt(t){var h;const{width:e,height:s,extent:a,dimensions:i}=Yt(t),{ranges:r}=t,n=Object.keys(r).sort((p,w)=>p<w?-1:1),u=[];for(let p=0;p<n.length;p++){const w=n[p];i!=null&&i.length&&u.push({name:w,dimensions:i})}const o=Xt(t);u.forEach(p=>o[p.name]&&Object.assign(p,o[p.name]));const l=u.length?{variables:u}:void 0,c=[];for(let p=0;p<n.length;p++){const w=n[p],{values:m,dataType:d,axisNames:g,shape:y}=r[w],v=y.length>2?p*y.slice(0,-2).reduce((I,F)=>I*F):0,x=g.slice(0,-2),b=y.slice(0,-2),T=d==="float"?"f32":Kt(m),S=e*s,k=m.length/S;for(let I=0;I<k;I++){const F=oe.createEmptyBand(T,S),_=new Uint8Array(S).fill(255);let M=!1;const J=I*S;for(let P=0;P<S;P++){const N=m[J+P];N==null?(_[P]=0,M=!0):F[P]=N}if(p===0||i!=null&&i.length){const P=new oe({width:e,height:s,mask:M?_:null,pixels:[F],pixelType:T});P.updateStatistics(),(i==null?void 0:i.length)?c[Zt(x,b,I)+v]=P:c.push(P)}else{const P=c[I];P.pixels.push(F),M?P.mask&&(P.mask=oe.combineBandMasks([P.mask,_])):P.mask=M?_:null}}}const f=(h=Object.values(o).find(p=>p.attributeTable))==null?void 0:h.attributeTable;return{extent:a,pixelBlocks:c,multidimensionalInfo:l,attributeTable:f,bandNames:l?void 0:n}}let X=class extends Z{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,a={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,u]=r.storageInfo.tileInfo.size,{sliceId:o}=a,{pixelBlocks:l}=this.source,c={pixelBlock:o==null?l[0]:l[o],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:u},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(c,a):kt(c);return Promise.resolve(f)}const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:a,statistics:i,histograms:r,name:n,nativeExtent:u,transform:o}=e,l=s[0],{width:c,height:f,pixelType:h}=l,p=e.extent??new W({xmin:-.5,ymin:.5,xmax:c-.5,ymax:f-.5,spatialReference:new A({wkid:3857})}),w=e.isPseudoSpatialReference??!e.extent,m={x:p.width/c,y:p.height/f},d={...e.keyProperties};a&&(d.DataType="Thematic");const g=new ce({width:c,height:f,pixelType:h,extent:p,nativeExtent:u,attributeTable:a,transform:o,pixelSize:m,spatialReference:p.spatialReference,bandCount:l.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:w,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(l,{width:512,height:512},t),g.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,s){var f,h;const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,r=a.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:r},s):Promise.resolve(Mt(t,e,i,r)),u=a.statistics!=null,o=a.histograms!=null,l=this.ioConfig.skipStatistics||u?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve($t(t)),c=await ke([n,l]);if(!c[0].value&&c[1].value)throw new C("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=c[0].value,u||(a.statistics=(f=c[1].value)==null?void 0:f.statistics),o||(a.histograms=(h=c[1].value)==null?void 0:h.histograms)}async _buildMDimStats(t,e,s){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const r=i.dimensions.map(l=>{var c,f;return new wt({variableName:i.name,dimensionName:l.name,values:[((c=l.values)==null?void 0:c[0])??((f=l.extent)==null?void 0:f[0])],isSlice:!0})}),n=xt(r,e),u=n==null?null:t[n];if(u==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:u},s):Ne(u);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};R([O({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),R([O()],X.prototype,"source",void 0),R([O()],X.prototype,"url",null),X=R([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],X);const ve=X;let ee=class extends Z{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,s,a,i={}){return this._inMemoryRaster.fetchRawTile(e,s,a,i)}async _open(e){const{extent:s,pixelBlocks:a,multidimensionalInfo:i,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:u,histograms:o}=Ne(a[0]),l=n==null?void 0:n.map(p=>({BandName:p})),c={DataType:r?"Thematic":i?"Scientific":"Generic",BandProperties:l},f=new ve({source:{extent:s,pixelBlocks:a,attributeTable:r?Me.fromJSON(r):null,multidimensionalInfo:i,statistics:u,histograms:o,keyProperties:c,isPseudoSpatialReference:!1}});await f.open(),this._inMemoryRaster=f;const h=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",h.slice(0,h.indexOf("."))),this._set("rasterInfo",f.rasterInfo)}async _fetchData(e){var r,n,u,o;const s=this.source??(await this.request(this.url,{signal:e==null?void 0:e.signal})).data,a="imagery-tile-layer:open-coverage-json";if(((r=s.type)==null?void 0:r.toLowerCase())!=="coverage"||((u=(n=s.domain)==null?void 0:n.domainType)==null?void 0:u.toLowerCase())!=="grid")throw new C(a,"Only coverage with Grid domain type is supported");if(!s.ranges)throw new C(a,"Missing ranges in the grid coverage data");if(!((o=s.domain.referencing)!=null&&o.length))throw new C(a,"Missing domain referencing in the grid coverage data");const i=Object.values(s.ranges);for(let l=0;l<i.length;l++){const{axisNames:c,shape:f,type:h,values:p}=i[l];if(!(h.toLowerCase()==="ndarray"&&(p!=null&&p.length)&&(c!=null&&c.length)&&(f!=null&&f.length)))throw new C(a,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(Ee(c[c.length-1])&&De(c[c.length-2])))throw new C(a,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Qt(s)}};R([O({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),R([O({constructOnly:!0})],ee.prototype,"source",void 0),ee=R([Y("esri.layers.support.rasterDatasets.CovJSONRaster")],ee);const es=ee;function Fe(t,e){if(!t||!e)return null;const s=[];for(let a=0;a<t.length;a++)s.push(t[a]),s.push(e[a]);return s}function ts(t){const e=L(t,"GeodataXform"),s=ue(q(e,"SpatialReference/WKID")||U(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const a=q(e,"PolynomialOrder")??1,i=ie(e,"CoeffX/Double"),r=ie(e,"CoeffY/Double"),n=ie(e,"InverseCoeffX/Double"),u=ie(e,"InverseCoeffY/Double"),o=Fe(i,r),l=Fe(n,u);return{spatialReference:s,transform:o&&l&&o.length&&l.length?new Ie({spatialReference:s,polynomialOrder:a,forwardCoefficients:o,inverseCoefficients:l}):null}}function ss(t){var h;const e=q(t,"NoDataValue"),s=L(t,"Histograms/HistItem"),a=q(s,"HistMin"),i=q(s,"HistMax"),r=q(s,"BucketCount"),n=(h=U(s,"HistCounts"))==null?void 0:h.split("|").map(p=>Number(p));let u,o,l,c;Pe(t,"Metadata/MDI").forEach(p=>{const w=Number(p.textContent??p.nodeValue);switch(p.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":u=w;break;case"STATISTICS_MAXIMUM":o=w;break;case"STATISTICS_MEAN":l=w;break;case"STATISTICS_STDDEV":c=w}});const f=q(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n!=null&&n.length&&a!=null&&i!=null?{min:a,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:f,statistics:u!=null&&o!=null?{min:u,max:o,avg:l,stddev:c}:null}}function ue(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new A({wkid:e});if(t=String(t).trim(),ze(t))return new A({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const a=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),r=i>-1?i:s.indexOf("GEOGCS");if(r===-1)return null;const n=t.slice(r,t.lastIndexOf("]",a)+1).trim(),u=t.slice(a,t.lastIndexOf("]")).trim();e=me(n);const o=new A(e?{wkid:e}:{wkt:n}),l=me(u);return l&&(o.vcsWkid=l),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=me(t),new A(e!==0?{wkid:e}:{wkt:t})):null}function me(t){var i;const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(r=>r.trim()).filter(r=>r!==""),s=e[e.length-1].split(","),a=(i=s[0])==null?void 0:i.toLowerCase();if((a==="epsg"||a==="esri")&&t.endsWith('"]]')){const r=Number(s[1]);if(!isNaN(r)&&r!==0)return r}return 0}function be(t){var a;if(((a=t==null?void 0:t.documentElement.tagName)==null?void 0:a.toLowerCase())!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(he(i,"SRS")){if(!e.spatialReference){const r=U(i);e.spatialReference=ue(r)}}else if(he(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:r,transform:n}=ts(i);e.transform=n,e.spatialReference||(e.spatialReference=r)}else Pe(i,"MDI").forEach(r=>e.metadata[r.getAttribute("key")]=U(r));else if(he(i,"PAMRasterBand")){const r=ss(i);r.sourceBandIndex!=null&&e.rasterBands[r.sourceBandIndex]==null?e.rasterBands[r.sourceBandIndex]=r:e.rasterBands.push(r)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(n=>n.statistics).filter(Se):null;const r=!!s[0].histogram;e.histograms=r?s.map(n=>n.histogram).filter(Se):null}return e}let le=class extends Z{fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:a,histograms:i,transform:r}=await this._fetchAuxiliaryData(t);const n=!s;n&&(s=new A({wkid:3857})),i!=null&&i.length&&a==null&&(a=we(i));const{width:u,height:o}=e;let l=new W({xmin:-.5,ymin:.5-o,xmax:u-.5,ymax:.5,spatialReference:s});const c=r?r.forwardTransform(l):l;let f=!0;if(r){const p=r.forwardCoefficients;f=p&&p[1]===0&&p[2]===0,f&&(r=null,l=c)}const h=new ve({source:{extent:c,nativeExtent:l,transform:r,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t==null?void 0:t.signal}),s=Nt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new C("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const a=s.toLowerCase(),i=a==="gif"||a==="bmp"||!Ue("ios"),r=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new C("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(t){var c;const e=t==null?void 0:t.signal,{skipExtensions:s=[],skipMapInfo:a}=this.ioConfig,i=a||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,u=n&&s.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await ke([i,u]);if(e!=null&&e.aborted)throw He();const l=be((c=o[0].value)==null?void 0:c.data);if(!l.transform){const f=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(h=>Number(h)):null;l.transform=(f==null?void 0:f.length)===6?new Ie({forwardCoefficients:[f[4],f[5],f[0],-f[1],f[2],-f[3]]}):null}return l}};R([O({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=R([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],le);const re=le;let te=class extends Z{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,a={}){var J;const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,u=n!=null&&!!a.transposedVariableName;if(this._slices&&!u&&a.sliceId==null)return null;const o=u?0:i.maximumPyramidLevel-t+this._levelOffset,l=`${this.url}/tile/${o}/${e}/${s}`,c=this._slices?u?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null;let f,h;if(i.isBsqTile){const P=((J=a.bandIds)!=null&&J.length?a.bandIds:[0,1,2]).map(H=>this.request(l,{query:{...c,bandId:H},responseType:"array-buffer",signal:a.signal})),N=await Promise.all(P),E=N.map(H=>H.data.byteLength).reduce((H,Ae)=>H+Ae),z=new Uint8Array(E);h=[];let fe=0;for(const{data:H}of N)h.push(fe),z.set(new Uint8Array(H),fe),fe+=H.byteLength;f=z.buffer}else f=(await this.request(l,{query:c,responseType:"array-buffer",signal:a.signal})).data;if(!f)return null;const p=u?n.tileSize:i.tileInfo.size,w=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:h==null?void 0:h.length,offsets:h,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:u,noDataValue:this.rasterInfo.noDataValue});if(w==null)return null;const m=i.blockBoundary[t];if(i.compression!=="jpg"||s>m.minCol&&s<m.maxCol&&e>m.minRow&&e<m.maxRow)return w;const{origin:d,blockWidth:g,blockHeight:y}=i,{x:v,y:x}=this.getPyramidPixelSize(t),b=Math.round((r.xmin-d.x)/v)%g,T=Math.round((r.xmax-d.x)/v)%g||g,S=Math.round((d.y-r.ymax)/x)%y,k=Math.round((d.y-r.ymin)/x)%y||y,I=s===m.minCol?b:0,F=e===m.minRow?S:0,_=s===m.maxCol?T:g,M=e===m.maxRow?k:y;return Pt(w,{x:I,y:F},{width:_-I,height:M-F}),w}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const a=this._slices[s].multidimensionalDefinition;if(a.length===e.length&&!a.some(i=>{const r=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){var r,n,u;const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(o=>{var l;return(l=o.data)==null?void 0:l.statistics}),a=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(o=>{var l;return(l=o.data)==null?void 0:l.histograms}),i=await Promise.all([s,a]);return i[0]&&i[0].forEach(o=>{o.avg=o.mean,o.stddev=o.standardDeviation}),(u=(n=(r=i[1])==null?void 0:r[0])==null?void 0:n.counts)!=null&&u.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-a+this._levelOffset;const n=s.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,s.row,s.col,e)==="available")break}catch{}if(r--,a++,s=this.identifyPixelLocation(n,a,e.datumTransformation),s===null)return null}return r===-1||s==null?null:a}async _open(t){var S,k;const e=t==null?void 0:t.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new C("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=((S=a.name)==null?void 0:S.slice(a.name.indexOf("/")+1))??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new C("image-server-raster:open","cannot initialize image service");mt(r,a);const n=this.tileType==="Map"?as(a.tileInfo,a):ne.fromJSON(a.tileInfo);je(n);const[u,o]=this._computeMinMaxLOD(r,n),{extent:l,pixelSize:c}=r,f=.5/r.width*c.x,h=Math.max(c.x,c.y),{lods:p}=n;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(c.x-c.y)>f||!p.some(I=>Math.abs(I.resolution-h)<f))&&(c.x=c.y=u.resolution,r.width=Math.ceil((l.xmax-l.xmin)/c.x-.1),r.height=Math.ceil((l.ymax-l.ymin)/c.y-.1));const w=u.level-o.level,[m,d]=n.size,g=[],y=[];p.forEach((I,F)=>{I.level>=o.level&&I.level<=u.level&&g.push({x:I.resolution,y:I.resolution}),F<p.length-1&&y.push(Math.round(10*I.resolution/p[F+1].resolution)/10)}),g.sort((I,F)=>I.x-F.x);const v=this.computeBlockBoundary(l,m,d,n.origin,g,w),x=g.length>1?g.slice(1):null;let b;a.transposeInfo&&(b={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:((k=r.keyProperties)==null?void 0:k._yxs.PacketSize)??0});const T=y.length<=1||y.length>=3&&y.slice(0,-1).every(I=>I===y[0])?y[0]??2:Math.round(10/(o.resolution/u.resolution)**(-1/w))/10;if(r.storageInfo=new xe({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:x,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:w,tileInfo:n,isBsqTile:!!a.bsq,transposeInfo:b,blockBoundary:v}),is(r),this._set("rasterInfo",r),a.capabilities.toLowerCase().includes("tilemap")){const I={tileInfo:r.storageInfo.tileInfo,parsedUrl:Ge(this.url),url:this.url,tileServers:[]};this._tilemapCache=new jt({layer:I})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,u=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),l=A.fromJSON(e.spatialReference||n.spatialReference),c=new V({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:l});return new ce({width:u,height:o,bandCount:3,extent:W.fromJSON(n),spatialReference:l,pixelSize:c,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,a=gt(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(n=>{var u;return(u=n.data)==null?void 0:u.slices}).catch(()=>null):null,r=await Promise.all([a,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,a=.5/t.width*s.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,i.map(h=>h.level))),{tileType:u}=this;if(u==="Map")return this._levelOffset=i[0].level,[r,n];if(u==="Raster")return[i.find(h=>h.resolution===s.x)??r,n];const{minScale:o,maxScale:l}=this.sourceJSON;let c=r;l>0&&(c=i.find(h=>Math.abs(h.scale-l)<a),c||(c=i.filter(h=>h.scale>l).sort((h,p)=>h.scale>p.scale?1:-1)[0]??r));let f=n;return o>0&&(f=i.find(h=>Math.abs(h.scale-o)<a)??n,this._levelOffset=f.level-n.level),[c,f]}};function as(t,e){if(!t)return null;const{minScale:s,maxScale:a,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return ne.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=i&&n<=r)});if(s!==0&&a!==0){const n=l=>Math.round(1e4*l)/1e4,u=s?n(s):1/0,o=a?n(a):-1/0;return ne.fromJSON({...t,lods:t.lods.filter(l=>{const c=n(l.scale);return c<=u&&c>=o})})}return ne.fromJSON(t)}function is(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&(s!=null&&s.wkid)&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Ht,t.extent=t.transform.forwardTransform(e))}R([O({type:String,json:{write:!0}})],te.prototype,"datasetFormat",void 0),R([O()],te.prototype,"tileType",void 0),te=R([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],te);const rs=te,B=new Map;B.set("Int8","s8"),B.set("UInt8","u8"),B.set("Int16","s16"),B.set("UInt16","u16"),B.set("Int32","s32"),B.set("UInt32","u32"),B.set("Float32","f32"),B.set("Float64","f32"),B.set("Double64","f32");const G=new Map;G.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),G.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),G.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),G.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let K=class extends Z{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,a={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,u=n[t];if(!u||u.maxRow<e||u.maxCol<s||u.minRow>e||u.minCol>s)return null;const{bandCount:o,pixelType:l}=this.rasterInfo,{ranges:c,actualTileWidth:f,actualTileHeight:h}=this._getTileLocation(t,e,s);if(!c||c.length===0)return null;if(c[0].from===0&&c[0].to===0){const _=new Uint8Array(i*r);return new oe({width:i,height:r,pixels:void 0,mask:_,validPixelCount:0})}const{bandIds:p}=this.ioConfig,w=this._getBandSegmentCount(),m=[];let d=0;for(d=0;d<w;d++)p&&!p.includes(d)||m.push(this.request(this._files.data,{range:{from:c[d].from,to:c[d].to},responseType:"array-buffer",signal:a.signal}));const g=await Promise.all(m),y=g.map(_=>_.data.byteLength).reduce((_,M)=>_+M),v=new Uint8Array(y),x=[];let b=0;for(d=0;d<w;d++)x.push(b),v.set(new Uint8Array(g[d].data),b),b+=g[d].data.byteLength;const T=G.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(v.buffer,{width:i,height:r,format:T,planes:(p==null?void 0:p.length)||o,offsets:x,pixelType:l});if(S==null)return null;let{noDataValue:k}=this.rasterInfo;if(k!=null&&T!=="lerc"&&!S.mask&&(k=k[0],k!=null)){const _=S.width*S.height,M=new Uint8Array(_);if(Math.abs(k)>1e24)for(d=0;d<_;d++)Math.abs((S.pixels[0][d]-k)/k)>1e-6&&(M[d]=1);else for(d=0;d<_;d++)S.pixels[0][d]!==k&&(M[d]=1);S.mask=M}let I=0,F=0;if(f!==i||h!==r){let _=S.mask;if(_)for(d=0;d<r;d++)if(F=d*i,d<h)for(I=f;I<i;I++)_[F+I]=0;else for(I=0;I<i;I++)_[F+I]=0;else for(_=new Uint8Array(i*r),S.mask=_,d=0;d<h;d++)for(F=d*i,I=0;I<f;I++)_[F+I]=1}return S}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:a,files:i}=this._parseHeader(s.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const g=await this._fetchAuxiliaryData(t);g!=null&&(a.statistics=g.statistics??a.statistics,a.histograms=g.histograms,g.histograms&&a.statistics==null&&(a.statistics=we(g.histograms)))}r&&this.updateImageSpaceRasterInfo(a),this._set("rasterInfo",a),this._files=i;const u=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=ns(u.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:h}=this.rasterInfo,p=[],w=this._getBandSegmentCount();let m=0,d=-1;for(;m<this._storageIndex.length;){d++;const g=Math.ceil(f/o/c**d)-1,y=Math.ceil(h/l/c**d)-1;m+=(g+1)*(y+1)*w*4,p.push({maxRow:y,maxCol:g,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return G.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:a,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:u}=this.rasterInfo,o=this._getBandSegmentCount();let l,c,f,h=0,p=0;for(f=0;f<t;f++)p=r**f,l=Math.ceil(n/a/p),c=Math.ceil(u/i/p),h+=l*c;p=r**t,l=Math.ceil(n/a/p),c=Math.ceil(u/i/p),h+=e*l+s,h*=4*o;const w=this._storageIndex.subarray(h,h+4*o);let m=0,d=0;const g=[];for(let y=0;y<o;y++)m=w[4*y]*2**32+w[4*y+1],d=m+w[4*y+2]*2**32+w[4*y+3]-1,g.push({from:m,to:d});return{ranges:g,actualTileWidth:s<l-1?a:Math.ceil(n/p)-a*(l-1),actualTileHeight:e<c-1?i:Math.ceil(u/p)-i*(c-1)}}_parseHeader(t){const e=L(t,"MRF_META/Raster");if(!e)throw new C("mrf:open","not a valid MRF format");const s=L(e,"Size"),a=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),r=parseInt(s.getAttribute("c"),10),n=(U(e,"Compression")||"none").toLowerCase();if(!G.has(n))throw new C("mrf:open","currently does not support compression "+n);const u=U(e,"DataType")||"UInt8",o=B.get(u);if(o==null)throw new C("mrf:open","currently does not support pixel type "+u);const l=L(e,"PageSize"),c=parseInt(l.getAttribute("x"),10),f=parseInt(l.getAttribute("y"),10),h=L(e,"DataValues");let p,w;if(h&&(w=h.getAttribute("NoData"),w!=null&&(p=w.trim().split(" ").map(_=>parseFloat(_)))),L(t,"MRF_META/CachedSource"))throw new C("mrf:open","currently does not support MRF referencing other data files");const m=L(t,"MRF_META/GeoTags"),d=L(m,"BoundingBox");let g,y=!1;if(d!=null){const _=parseFloat(d.getAttribute("minx")),M=parseFloat(d.getAttribute("miny")),J=parseFloat(d.getAttribute("maxx")),P=parseFloat(d.getAttribute("maxy")),N=U(m,"Projection")||"";let E=A.WGS84;if(N!=="LOCAL_CS[]")if(N.toLowerCase().startsWith("epsg:")){const z=Number(N.slice(5));isNaN(z)||z===0||(E=new A({wkid:z}))}else E=ue(N)??A.WGS84;else y=!0,E=new A({wkid:3857});g=new W(_,M,J,P),g.spatialReference=E}else y=!0,g=new W({xmin:-.5,ymin:.5-i,xmax:a-.5,ymax:.5,spatialReference:new A({wkid:3857})});const v=L(t,"MRF_META/Rsets"),x=parseInt((v==null?void 0:v.getAttribute("scale"))||"2",10),b=g.spatialReference,T=new xe({origin:new V({x:g.xmin,y:g.ymax,spatialReference:b}),blockWidth:c,blockHeight:f,pyramidBlockWidth:c,pyramidBlockHeight:f,compression:n,pyramidScalingFactor:x}),S=new V({x:g.width/a,y:g.height/i,spatialReference:b}),k=new ce({width:a,height:i,extent:g,isPseudoSpatialReference:y,spatialReference:b,bandCount:r,pixelType:o,pixelSize:S,noDataValue:p,storageInfo:T}),I=U(t,"datafile"),F=U(t,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:F||this.url.replace(".mrf",".idx"),data:I||this.url.replace(".mrf",G.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return be(e)}catch{return null}}};function ns(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,a,i,r,n;if(Et){for(s=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),a=new Uint8Array(i),r=0;r<t.byteLength/4;r++)for(n=0;n<4;n++)a[4*r+n]=s[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}R([O()],K.prototype,"_files",void 0),R([O()],K.prototype,"_storageIndex",void 0),R([O({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),K=R([Y("esri.layers.support.rasterDatasets.MRFRaster")],K);const os=K;function ls(t){const e=t.fields,s=t.records,a=e.some(l=>l.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(l=>({name:l.name,type:"esriFieldType"+l.typeName,alias:l.name}))),r=i.map(l=>l.name),n=[];let u=0,o=0;return s.forEach(l=>{const c={};for(c[a]=u++,o=1;o<r.length;o++)c[r[o]]=l[o-1];n.push({attributes:c})}),{displayFieldName:"",fields:i,features:n}}class cs{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),a=3&s.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=s.getUint32(4,!0),r=s.getUint16(8,!0),n=s.getUint16(10,!0),u={version:a,recordCount:i,headerByteCount:r,recordByteCount:n};let o=32;const l=[],c=[];let f;if(a===3){for(;s.getUint8(o)!==13;)f=String.fromCharCode(s.getUint8(o+11)).trim(),l.push({name:Re(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<i&&e.byteLength-o>n;){const h=[];s.getUint8(o)===32?(o+=1,l.forEach(p=>{if(p.type==="C")h.push(Re(new Uint8Array(e,o,p.length)).trim());else if(p.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim(),10));else if(p.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim()));else if(p.type==="D"){const w=String.fromCharCode.apply(null,new Uint8Array(e,o,p.length)).trim();h.push(new Date(parseInt(w.slice(0,4),10),parseInt(w.slice(4,6),10)-1,parseInt(w.slice(6,8),10)))}o+=p.length}),c.push(h)):o+=n}}return{header:u,fields:l,records:c,recordSet:ls({fields:l,records:c})}}}const ye=(t,e)=>{var s;return(s=t.get(e))==null?void 0:s.values},se=(t,e)=>{var s,a;return(a=(s=t.get(e))==null?void 0:s.values)==null?void 0:a[0]};let j=class extends Z{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this._chunkSize=10485760,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,a={}){var r;if(!((r=this._headerInfo)!=null&&r.isSupported)||this.isBlockOutside(t,e,s))return null;const i=await this._fetchRawTiffTile(t,e,s,!1,a);if(i!=null&&this._headerInfo.hasMaskBand){const n=await this._fetchRawTiffTile(t,e,s,!0,a);n!=null&&n.pixels[0]instanceof Uint8Array&&(i.mask=n.pixels[0])}return i}async _open(t){var d,g,y,v;const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new C("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:a,firstIFDPos:i,isBigTiff:r}=Dt(s),n=[],u={fileChunk:s,posIFD:i,fileOffset:0};await this._readIFDs(n,u,a,r?8:4,e);const{imageInfo:o,rasterInfo:l}=us(n),c=At(n),f=Bt(n);if(this._headerInfo={littleEndian:a,isBigTiff:r,ifds:n,pyramidIFDs:c,maskIFDs:f,...o},this._set("rasterInfo",l),!o.isSupported)throw new C("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new C("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");l.isPseudoSpatialReference&&Q.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const h=(g=(d=n[0].get("PREDICTOR"))==null?void 0:d.values)==null?void 0:g[0];if(((v=(y=n[0].get("SAMPLEFORMAT"))==null?void 0:y.values)==null?void 0:v[0])===3&&h===2)throw new C("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:w,skipExtensions:m=[]}=this.ioConfig;if(!m.includes("aux.xml")&&!w){const x=await this._fetchAuxiliaryMetaData(t);x!=null&&fs(x,l)}m.includes("vat.dbf")||l.bandCount!==1||l.pixelType!=="u8"||w||(l.attributeTable=await this._fetchAuxiliaryTable(t),l.attributeTable!=null&&(l.keyProperties.DataType="thematic")),w&&this.updateImageSpaceRasterInfo(l),this.updateTileInfo()}async _validateOrFetchHeaderBuffer(t,e){let{fileChunk:s,fileOffset:a,posIFD:i}=t;return(i+8>=s.byteLength||i<0)&&(a=i+a,s=(await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:e})).data,i=0),{fileChunk:s,fileOffset:a,posIFD:i}}async _readIFDs(t,e,s,a=4,i){if(!e.posIFD)return null;e=await this._validateOrFetchHeaderBuffer(e,i);const r=await this._readIFD(e,s,_e,a,i);if(!(r!=null&&r.ifd))throw new C("tiffraster:open","cannot parse tiff header. failed to open url "+this.url);if(t.push(r.ifd),!r.nextIFD)return null;e.posIFD=r.nextIFD-e.fileOffset,await this._readIFDs(t,e,s,a,i)}async _readIFD(t,e,s=_e,a=4,i){var l,c;let{fileChunk:r,posIFD:n,fileOffset:u}=t;if(!t.fileChunk)return null;const o=Lt(r,e,n,u,s,a);if(o.success){const f=[];if((l=o.ifd)==null||l.forEach(h=>{h.values||f.push(h)}),f.length>0&&await this._fillOffsets(f,e,o.nextIFD,i),(c=o.ifd)==null?void 0:c.has("GEOKEYDIRECTORY")){const h=o.ifd.get("GEOKEYDIRECTORY"),p=h==null?void 0:h.values;if(p&&p.length>4){const w=p[0]+"."+p[1]+"."+p[2];n=h.valueOffset+6-u;const m=await this._validateOrFetchHeaderBuffer({fileChunk:r,posIFD:n,fileOffset:u},i),d=await this._readIFD(m,e,Jt,2,i);h.data=d==null?void 0:d.ifd,h.data&&h.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[w]})}}return o}return o.requiredBufferSize?(r=(await this.request(this.url,{range:{from:u,to:u+n+o.requiredBufferSize+8},responseType:"array-buffer",signal:i})).data,r.byteLength<n+o.requiredBufferSize?null:(t.fileChunk=r,t.fileOffset=u,this._readIFD(t,e,s,a,i))):null}async _fillOffsets(t,e,s,a){const i=t.filter(c=>c.offlineOffsetSize!=null);if(i.length===0)return;const r=i.map(c=>c.offlineOffsetSize),n=Math.min.apply(null,r.map(c=>c[0])),u=Math.max.apply(null,r.map(c=>c[0]+c[1]));let o=r.length===1||u-n<=this._bufferSize;if(!o&&r.length>1&&(r.sort((c,f)=>c[0]-f[0]),o=r.reduce((c,f)=>c===f[0]?f[0]+f[1]:0,r[0][0])===u),o){const c=await this._fetchOffsets(n,Math.max(u,n+this._bufferSize),a);return void i.forEach(f=>Oe(c,e,f,n))}const l=i.map(async c=>{const f=c.offlineOffsetSize,h=await this._fetchOffsets(f[0],f[1]+f[0],a);Oe(h,e,c,f[0])});await Promise.all(l)}async _fetchOffsets(t,e,s){const a=[],i=this._chunkSize,r=Math.ceil((e-t)/i);let n=t;for(let l=0;l<r;l++)a.push(this.request(this.url,{range:{from:n,to:l===r-1?e:n+i-1},responseType:"array-buffer",signal:s})),n+=i;const u=await Promise.all(a);if(r===1)return u[0].data;const o=new Uint8Array(e-t+1);for(let l=0;l<r;l++)o.set(new Uint8Array(u[l].data),l*i);return o.buffer}async _fetchRawTiffTile(t,e,s,a,i={}){const r=this._getTileLocation(t,e,s,a);if(!r)return null;const{ranges:n,actualTileWidth:u,actualTileHeight:o,ifd:l}=r,c=n.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:i.signal})),f=await Promise.all(c),h=f.map(T=>T.data.byteLength).reduce((T,S)=>T+S),p=f.length===1?f[0].data:new ArrayBuffer(h),w=[0],m=[0];if(f.length>1){const T=new Uint8Array(p);for(let S=0,k=0;S<f.length;S++){const I=f[S].data;T.set(new Uint8Array(I),k),w[S]=k,k+=I.byteLength,m[S]=I.byteLength}}const{blockWidth:d,blockHeight:g}=this.getBlockWidthHeight(t),y=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:w,sizes:m},width:d,height:g,planes:null,pixelType:null});if(y==null)return null;let v,x,b;if(u!==d||o!==g){let T=y.mask;if(T)for(v=0;v<g;v++)if(b=v*d,v<o)for(x=u;x<d;x++)T[b+x]=0;else for(x=0;x<d;x++)T[b+x]=0;else for(T=new Uint8Array(d*g),y.mask=T,v=0;v<o;v++)for(b=v*d,x=0;x<u;x++)T[b+x]=1}return y}_getTileLocation(t,e,s,a=!1){const{firstPyramidLevel:i,blockBoundary:r}=this.rasterInfo.storageInfo,n=t===0?0:t-(i-1),{_headerInfo:u}=this;if(!u)return null;const o=a?u.maskIFDs[n]:n===0?u==null?void 0:u.ifds[0]:u==null?void 0:u.pyramidIFDs[n-1];if(!o)return null;const l=zt(o,u),c=ye(o,"TILEOFFSETS");if(c===void 0)return null;const f=ye(o,"TILEBYTECOUNTS"),{minRow:h,minCol:p,maxRow:w,maxCol:m}=r[n];if(e>w||s>m||e<h||s<p)return null;const d=se(o,"IMAGEWIDTH"),g=se(o,"IMAGELENGTH"),y=se(o,"TILEWIDTH"),v=se(o,"TILELENGTH"),x=[];if(l){const{bandCount:b}=this.rasterInfo;for(let T=0;T<b;T++){const S=T*(w+1)*(m+1)+e*(m+1)+s;x[T]={from:c[S],to:c[S]+f[S]-1}}}else{const b=e*(m+1)+s;x.push({from:c[b],to:c[b]+f[b]-1})}for(let b=0;b<x.length;b++)if(x[b].from==null||!x[b].to||x[b].to<0)return null;return{ranges:x,ifd:o,actualTileWidth:s===m&&d%y||y,actualTileHeight:e===w&&g%v||v}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return be(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t==null?void 0:t.signal}),s=cs.parse(e);return s!=null&&s.recordSet?Me.fromJSON(s.recordSet):null}catch{return null}}};function us(t){var J,P;const e=Ut(t),{width:s,height:a,tileWidth:i,tileHeight:r,planes:n,pixelType:u,compression:o,firstPyramidLevel:l,maximumPyramidLevel:c,pyramidBlockWidth:f,pyramidBlockHeight:h,pyramidResolutions:p,tileBoundary:w,affine:m,metadata:d}=e,g=((J=e.extent.spatialReference)==null?void 0:J.wkt)||((P=e.extent.spatialReference)==null?void 0:P.wkid);let y=ue(g),v=!!e.isPseudoGeographic;y==null&&(v=!0,y=new A({wkid:3857}));const x=new W({...e.extent,spatialReference:y}),b=new V(x?{x:x.xmin,y:x.ymax,spatialReference:y}:{x:0,y:0}),T=new xe({blockWidth:i,blockHeight:r,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,origin:b,firstPyramidLevel:l,maximumPyramidLevel:c,pyramidResolutions:p,blockBoundary:w}),S=new V({x:(x.xmax-x.xmin)/s,y:(x.ymax-x.ymin)/a,spatialReference:y}),k=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let I=null;const F=se(t[0],"PHOTOMETRICINTERPRETATION"),_=ye(t[0],"COLORMAP");if(F<=3&&(_==null?void 0:_.length)>3&&_.length%3==0){I=[];const N=_.length/3;for(let E=0;E<N;E++)I.push([E,_[E]>>>8,_[E+N]>>>8,_[E+2*N]>>>8])}const M=new ce({width:s,height:a,bandCount:n,pixelType:u,pixelSize:S,storageInfo:T,spatialReference:y,isPseudoSpatialReference:v,keyProperties:k,extent:x,colormap:I,statistics:d?d.statistics:null});if(m!=null&&m.length&&(M.nativeExtent=new W({xmin:-.5,ymin:.5-a,xmax:s-.5,ymax:.5,spatialReference:y}),M.transform=new Ie({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new V({x:(x.xmax-x.xmin)/s,y:(x.ymax-x.ymin)/a,spatialReference:y}),T.origin.x=-.5,T.origin.y=.5),p){const{x:N,y:E}=M.pixelSize;p.forEach(z=>{z.x*=N,z.y*=E})}return{imageInfo:e,rasterInfo:M}}function fs(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=we(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new V({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}R([O()],j.prototype,"_files",void 0),R([O()],j.prototype,"_headerInfo",void 0),R([O()],j.prototype,"_bufferSize",void 0),R([O()],j.prototype,"_chunkSize",void 0),R([O({type:String,json:{write:!0}})],j.prototype,"datasetFormat",void 0),j=R([Y("esri.layers.support.rasterDatasets.TIFFRaster")],j);const hs=j,D=new Map;D.set("MRF",{desc:"Meta Raster Format",constructor:os}),D.set("TIFF",{desc:"GeoTIFF",constructor:hs}),D.set("RasterTileServer",{desc:"Raster Tile Server",constructor:rs}),D.set("JPG",{desc:"JPG Raster Format",constructor:re}),D.set("PNG",{desc:"PNG Raster Format",constructor:re}),D.set("GIF",{desc:"GIF Raster Format",constructor:re}),D.set("BMP",{desc:"BMP Raster Format",constructor:re}),D.set("CovJSON",{desc:"COVJSON Raster Format",constructor:es}),D.set("MEMORY",{desc:"In Memory Raster Format",constructor:ve});class ge{static get supportedFormats(){const e=new Set;return D.forEach((s,a)=>e.add(a)),e}static async open(e){var f;const{url:s,ioConfig:a,source:i,sourceJSON:r}=e;let n=e.datasetFormat??(a==null?void 0:a.datasetFormat);n==null&&(s.includes(".")?n=s.slice(s.lastIndexOf(".")+1).toUpperCase():((f=i==null?void 0:i.type)==null?void 0:f.toLowerCase())==="coverage"?n="CovJSON":i!=null&&i.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const u={url:s,source:i,sourceJSON:r,datasetFormat:n,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(u).forEach(h=>{u[h]==null&&delete u[h]}),n){if(!this.supportedFormats.has(n))throw new C("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new C("rasterfactory:open",`cannot open raster: ${s}`);const h=new(D.get(n)).constructor(u);return await h.open({signal:e.signal}),h}const o=Array.from(D.keys()).filter(h=>h!=="CovJSON"&&h!=="Memory");let l=0;const c=()=>{if(n=o[l++],!n||n==="CRF")return null;const h=new(D.get(n)).constructor(u);return h.open({signal:e.signal}).then(()=>h).catch(()=>c())};return c()}static register(e,s,a){D.has(e.toUpperCase())||D.set(e.toUpperCase(),{desc:s,constructor:a})}}let $=class extends We(qe(Ve(Ye(yt(Xe(ht(dt(Ke(Ze(Qe(et(tt.ClonableMixin(st))))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=at(async(e,s,a)=>{const{save:i,saveAs:r}=await it(()=>import("./imageryUtils-DVG33d0S.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(e){case ae.SAVE:return i(this,s);case ae.SAVE_AS:return r(this,a,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(rt).then(()=>this._openRaster(e))),Promise.resolve(this)}set elevationInfo(t){this._set("elevationInfo",t),this._validateElevationInfo()}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var r,n;const t=[It("Pixel Value"),vt("Raw Pixel Value")],e=((r=this.raster)==null?void 0:r.rasterInfo)??this.serviceRasterInfo,s=e==null?void 0:e.attributeTable;if(s){const u=bt(s);t.push(...u)}const a=e==null?void 0:e.dataType,i=e==null?void 0:e.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const u=(n=i.variables[0].unit)==null?void 0:n.trim(),o=St(u),l=Tt();t.push(o,l)}if(i){const u=Rt(i);t.push(...u)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=(t==null?void 0:t.visibleFieldNames)??new Set(e.map(({name:r})=>r).filter(r=>r!==_t.rawServicePixelValue)),a=nt({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return a!=null&&a.fieldInfos&&i&&Ot(a.fieldInfos,i),a}async generateRasterInfo(t,e){var s;if(t=ot($e,t),await this.load(),!t||((s=t.functionName)==null?void 0:s.toLowerCase())==="none")return this.serviceRasterInfo;try{const{rasterInfo:a}=await this._openFunctionRaster(t,e);return a}catch(a){throw a instanceof C?a:new C("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(ae.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(ae.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e!=null&&e.messages){const a=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new C("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}async _openRaster(t){var a;let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=Ct(this.raster),!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:r,source:n}=this;if(!i&&!n)throw new C("imagery-tile-layer:open","missing url or source parameter");n?await this._openFromSource(n,t):r?await this._openFromUrlWithRasterFunction(i,r,t):await this._openFromUrl(i,t)}const s=this.raster.rasterInfo;if(!s)throw new C("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:(a=this.serviceRasterInfo)==null?void 0:a.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(lt(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=Ft(t),this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const a=[t];e&&Gt(e.toJSON(),a);const i=await Promise.all(a.map(n=>ge.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),r=i.findIndex(n=>n==null);if(r>-1)throw new C("imagery-tile-layer:open",`cannot open raster: ${a[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await ge.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new C("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){var r;const s="the tiled imagery data source is not supported",a=((r=t.type)==null?void 0:r.toLowerCase())==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!a)throw new C("imagery-tile-layer:open",s);a==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await ge.open({url:"",source:t,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new C("imagery-tile-layer:open",s);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){var r;const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(n=>s[n.url]=n);const a=Wt(((r=t.functionDefinition)==null?void 0:r.toJSON())??t.toJSON(),s),i=new pt({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof C&&Q.getLogger(this).error("imagery-tile-layer:open",s.message),Q.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}_validateElevationInfo(){const t=this.elevationInfo;Ce(Q.getLogger(this),qt("ImageryTile layers","relative-to-scene",t)),Ce(Q.getLogger(this),Vt("ImageryTile layers",t))}};R([O({clonable:!1})],$.prototype,"_primaryRasters",void 0),R([O({type:ct,value:null,json:{read:!1}})],$.prototype,"elevationInfo",null),R([O(ut)],$.prototype,"legendEnabled",void 0),R([O({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],$.prototype,"isReference",void 0),R([O({type:["show","hide"]})],$.prototype,"listMode",void 0),R([O({json:{read:!0,write:!0}})],$.prototype,"blendMode",void 0),R([O({type:$e,json:{name:"renderingRule",write:!0}})],$.prototype,"rasterFunction",void 0),R([O()],$.prototype,"sourceJSON",void 0),R([O({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],$.prototype,"version",void 0),R([O({readOnly:!0,json:{read:!1}})],$.prototype,"type",void 0),R([O({type:["ArcGISTiledImageServiceLayer"]})],$.prototype,"operationalLayerType",void 0),R([O({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],$.prototype,"popupEnabled",void 0),R([O({type:ft,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],$.prototype,"popupTemplate",void 0),R([O({readOnly:!0})],$.prototype,"defaultPopupTemplate",null),R([O({readOnly:!0,type:[Te]})],$.prototype,"fields",void 0),R([O({readOnly:!0,type:[Te]})],$.prototype,"rasterFields",null),R([O({constructOnly:!0})],$.prototype,"source",void 0),$=R([Y("esri.layers.ImageryTileLayer")],$);const Ps=$;export{Ps as default};
