import{g5 as d,am as h,dj as l,ae as S,aL as g,ao as N,aF as D}from"./index-Btyj_e22.js";import E from"./Mesh-D35GyIEi.js";import{n as F,i as M}from"./External-ChOQY9HL.js";import{n as T,i as I}from"./meshFeatureAttributes-x4GB0ktA.js";import"./axisAngleDegrees-PD2lQYHZ.js";import"./quat-CAuRaFQ1.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-DAmYYG0s.js";import"./meshProperties-BrNWSC8G.js";import"./MeshLocalVertexSpace-DXtjzQmS.js";import"./MeshTransform-ByyEaDND.js";import"./mat4f64-q_b6UJoq.js";import"./MeshVertexAttributes-c930w4lo.js";import"./meshVertexSpaceUtils-CHeQiXId.js";import"./triangulationUtils-Dntd3MLC.js";import"./earcut-D9gy186-.js";import"./Indices-LFDuyM-C.js";import"./plane-DLQjn7Jn.js";import"./vectorStacks-D7GRVTeg.js";import"./deduplicate-Dl3YaKLF.js";import"./projectPointToVector-BK33IwoO.js";import"./vertexSpaceConversion-Bv1pfd9X.js";import"./spatialReferenceEllipsoidUtils-hAdzTDsD.js";import"./computeTranslationToOriginAndRotation-D9omgdEo.js";import"./vec3-CDGT5FW5.js";import"./BufferView-CYbRrMZQ.js";import"./vec4-DrvDLRUl.js";const L=()=>h.getLogger("esri.rest.support.meshFeatureSet");function at(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=g.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=b(o,e.assetMaps),i=t.sourceSpatialReference??N.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?w(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=O(u,m,i,o,n);s.features.push(new D({geometry:p,attributes:c(u)}))}return s}function w(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function O(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=I(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=P(i);return p?E.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}var f;function b(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=d(i,t.supportedFormats);if(!p){L().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const y=l(e,s,()=>({files:new Map}));l(y.files,n,()=>({name:n,type:i,mimeType:p,status:$(c),parts:[]})).parts[u]={hash:m,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==f.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new F(n.url,n.hash))}e.push(new M(r.name,r.mimeType,s))}return{type:"service",assets:e}}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{b as assetMapFromAssetMapsJSON,O as extractMesh,at as meshFeatureSetFromJSON};
