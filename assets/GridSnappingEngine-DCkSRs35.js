import{eh as V,bp as U,ha as E,fS as F,hb as X,am as Y,cw as D,hc as W,hd as j,ar as o,as as p,at as H}from"./index-cGsjYgnw.js";import{l as I,u as T,t as _}from"./gridUtils-BVNKepoG.js";import{f as h,d as k,c as q}from"./hitTestSelectUtils-Dmu0Kboe.js";import{r as G,a as A}from"./RouteLayerInteraction-CFpOGYMb.js";import"./geodesicUtils-CgWJakNo.js";import"./quantityUtils-BCodB9PY.js";import"./projectVectorToVector-CfMPrWog.js";import"./projectPointToVector-ChbrHkLb.js";import"./plane-HiwvP9tU.js";import"./vectorStacks-CGdefod2.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-Fi8gi249.js";import"./elevationInfoUtils-BcQwXBrU.js";import"./spatialReferenceEllipsoidUtils-Caqgk3vX.js";import"./GraphicsLayer-DBoem6EB.js";import"./Stop-Dgn_Rgn3.js";import"./geodeticLengthOperator-8Cd3lYwq.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-DgYNOX0u.js";import"./lineSegment-CdImpY8L.js";let s=class extends V{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var t;return U(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t||!E(i.center.spatialReference,t))return null;try{const r=F(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?X(r.x,this.view.center.x,t):r.x;return h(n,r.y,r.z)}catch(r){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:I(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?D(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?T(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,e){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=e.feature)!=null&&u.attributes&&k in e.feature.attributes)return[];const a=e.coordinateHelper.arrayToPoint(t),l=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:u,viewMetersPerSRUnit:g,offsetScaleFactor:S,spatialReference:f,gridMetersPerStride:b,pixelsPerStride:C}=this;if(!(r&&u&&g&&l&&f&&S&&b&&C)||!r.dynamicScaling&&C<_||!E(t.spatialReference,f))return e;const y=F(t,f),L=h(y.x,y.y,y.z),c=m(L,-a,l,-n),P=b/g*S,d=B(c,P,l),{shouldSnapX:w,shouldSnapY:v}=J(d,c,i,u,g);if(!w&&!v)return[];const O=h((w?d:c)[0],(v?d:c)[1]),M=m(O,a,l,n),$=m(d,a,l,n);if(v){const R=z(d,c,P,"y"),x=m(R,a,l,n);e.push(new G({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=z(d,c,P,"x"),x=m(R,a,l,n);e.push(new G({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&v&&e.push(new A(M,e[0],e[1],!1)),e}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([H("esri.views.interactive.snapping.GridSnappingEngine")],s);const m=(t,i,e,r)=>{const n=q(t[0],t[1],t[2]);return j(n,j(n,n,e,i),e,r)},B=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,a=Math.trunc(r),l=Math.trunc(n),u=Math.round(r%1),g=Math.round(n%1),S=e[0]+(a+u)*i,f=e[1]+(l+g)*i;return h(S,f)},J=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(t[0]-i[0])/r,l=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<e,shouldSnapY:Math.abs(l*n)<e}},z=(t,i,e,r)=>{if(r==="y"){const a=i[0]>t[0]?1:-1;return h(t[0]+e*a,t[1])}const n=i[1]>t[1]?1:-1;return h(t[0],t[1]+e*n)};export{s as GridSnappingEngine};
