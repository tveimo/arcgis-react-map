import{ar as S,bJ as x,at as y,ae as c,av as h}from"./index-rbwFz4i4.js";import{c as O}from"./GeographicTransformation-BwLGB_nP.js";import{c as n,f as k,D as B,W as g,E as N,T as b,N as w,j as J,u as P,s as v}from"./dataUtils-A14zgQJc.js";import{x as z,j as T,_ as D,M as F}from"./RasterSymbolizer-COhMGulu.js";import{T as $}from"./rasterFunctionHelper-C64Cwsi8.js";import{v as j,s as I}from"./rasterProjectionHelper-DP0ARG5a.js";import{t as L,m as E,n as R}from"./PolynomialTransform-C3UaYHRL.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./clipUtils-DEmF63Sr.js";var p;let f=p=class extends L{constructor(){super(...arguments),this.type="identity"}clone(){return new p}};S([x({IdentityXform:"identity"})],f.prototype,"type",void 0),f=p=S([y("esri.layers.support.rasterTransforms.IdentityTransform")],f);const G={GCSShiftXform:R,IdentityXform:f,PolynomialXform:E};function M(i){if(!(i==null?void 0:i.type))return null;const e=G[i==null?void 0:i.type];if(e){const r=new e;return r.read(i),r}return null}function a(i){if(!i)return{result:null,transferList:[]};const{pixelBlock:t,transferList:e}=i.getTransferableObject();return{result:t,transferList:e}}class q{convertVectorFieldData(t){const e=n.fromJSON(t.pixelBlock),r=a(k(e,t.type));return Promise.resolve(r)}convertPixelBlockToFeatures(t){const e=B({pixelBlock:n.fromJSON(t.pixelBlock),extent:c.fromJSON(t.extent),fieldNames:t.fieldNames,skipFactor:t.skipFactor,skipSpatialReference:!0,pixelIdOffset:t.pixelIdOffset,imageRowSize:t.imageRowSize});return Promise.resolve(e)}computeStatisticsHistograms(t){const e=n.fromJSON(t.pixelBlock),r=z(e,{histogramSize:t.histogramSize,includeSkewnessKurtosis:t.includeSkewnessKurtosis});return Promise.resolve(r)}async decode(t){return a(await T(t.data,t.options))}symbolize(t){t.pixelBlock=n.fromJSON(t.pixelBlock),t.extent=t.extent?c.fromJSON(t.extent):null;const e=a(this.symbolizer.symbolize(t));return Promise.resolve(e)}async updateSymbolizer(t){var e;this.symbolizer=D.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=$(t.rasterFunctionJSON)}async process(t){var e;return a(this.rasterFunction.process({extent:c.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?n.fromJSON(r):null),primaryPixelSizes:(e=t.primaryPixelSizes)==null?void 0:e.map(r=>r!=null?h.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds}))}stretch(t){const e=a(this.symbolizer.simpleStretch(n.fromJSON(t.srcPixelBlock),t.stretchParams));return Promise.resolve(e)}estimateStatisticsHistograms(t){const e=F(n.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=g(n.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1),r=[];let s;return e&&(s=new Map,e.forEach((o,l)=>{if(o){const{pixelBlock:u,transferList:m}=o.getTransferableObject();s.set(l,u),m.forEach(d=>{r.includes(d)||r.push(d)})}})),Promise.resolve({result:s,transferList:r})}clipTile(t){const e=n.fromJSON(t.pixelBlock),r=a(N({...t,pixelBlock:e}));return Promise.resolve(r)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(m=>m?new n(m):null),r=b(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let s,o=r;t.coefs&&(o=w(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(s=J(t.destDimension,t.gcsGrid),o=P(o,t.isUV?"vector-uv":"vector-magdir",s));const{result:l,transferList:u}=a(o);return{result:{pixelBlock:l,localNorthDirections:s},transferList:u}}async createFlowMesh(t,e){const r={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:s,indexData:o}=await v(t.meshType,t.simulationSettings,r,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(t){var l;const e=c.fromJSON(t.projectedExtent),r=c.fromJSON(t.srcBufferExtent);let s=null;(l=t.datumTransformationSteps)!=null&&l.length&&(s=new O({steps:t.datumTransformationSteps})),await j();const o=t.rasterTransform?M(t.rasterTransform):null;return I({...t,projectedExtent:e,srcBufferExtent:r,datumTransformation:s,rasterTransform:o})}}export{q as default};
