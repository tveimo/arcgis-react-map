import{aO as y,ar as i,as as m,at as d,aM as f,d5 as g,d4 as w,a6 as $,hC as v,am as O,d0 as S}from"./index-rbwFz4i4.js";import{d as j}from"./Association-D6moHBJa.js";let o=class extends y{constructor(s){super(s),this.associations=[]}};i([m({type:[j],json:{write:!0}})],o.prototype,"associations",void 0),o=i([d("esri.rest.networks.support.QueryAssociationsResult")],o);function I(e){const{returnDeletes:s,elements:r,gdbVersion:n,moment:a}=e.toJSON();return{returnDeletes:s,elements:JSON.stringify(r.map(t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId}))),types:JSON.stringify(e.types.map(t=>S.toJSON(t))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:n,moment:a??Date.now()}}async function b(e,s,r){const n=f(e),a={...I(s),f:"json"},t=g({...n.query,...a}),c=w(t,{...r,method:"post"}),u=`${n.path}/associations/query`,{data:p}=await $(u,c),l=o.fromJSON(p);return s.types.includes("connectivity")&&v(O.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),l}export{b as queryAssociations};
