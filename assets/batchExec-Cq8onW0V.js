import{aY as o,di as d,bU as p,dj as f}from"./index-cGsjYgnw.js";import{QueueProcessor as b}from"./QueueProcessor-Ba6x5FHU.js";function v(a,e,s,t){return new w(a,e,s,t)}class m{constructor(e,s,t){this._executor=e,this._data=s,this._impl=t,this._closed=!1,this._resolver=o(),this._impl.open(this)}assertOpen(){if(this._closed)throw new Error("Batch closed.")}get data(){return this.assertOpen(),this._data}get results(){return this._resolver.promise}send(){try{this.assertOpen(),this._closed=!0,this._executor.resume(this),this._impl.close(this),d(this._resolver,this._impl.execute(this._data))}catch(e){this._resolver.reject(e)}}}class w{constructor(e,s,t,r){if(this._runJob=s,this._maxRunning=t,this._abortSignal=r,this._jobIdSeq=0,this._running=new Set,this._blocked=new Set,this._openBatches=new Map,this._state="ready",this._runResolver=null,t<1)throw new Error(`_maxRunning=${t} but cannot be < 1`);this._todo=e[Symbol.iterator](),this._queue=new b({concurrency:1,process:async i=>{if(i.type==="start"){const{id:n,args:_}=i,h=o(),u=o(),l={id:n,interrupt:h,finished:u.promise};return d(u,this._runJob(_,{id:n,yieldFor:c=>this.yieldFor(l,c)}).then(()=>{this._blocked.has(n)&&this._fail(new Error(`job ${n} completed before resuming`)),this._running.delete(n)||this._fail(new Error(`job ${n} not running?`))})),await Promise.race([h.promise,l.finished]),void this._tryQueue()}if(i.type==="continue")return i.job.interrupt=o(),i.data.status==="fulfilled"?i.continuation.resolve(i.data.value):i.continuation.reject(i.data.reason),await Promise.race([i.job.interrupt.promise,i.job.finished]),void this._tryQueue()}})}openBatch(e,s){return new m(this,e,s)}_fail(e,s=!1){var t;if((t=this._runResolver)==null||t.reject(e),this._state="stopped",!s)throw e}_schedule(e){this._queue.push(e).catch(s=>this._fail(s,!0))}_tryQueue(){var e,s;if(this._state==="running")if((e=this._abortSignal)!=null&&e.aborted)this._fail(p(),!0);else{if(this._running.size<this._maxRunning){const t=this._todo.next();if(!t.done){const r=this._jobIdSeq++;return this._running.add(r),void this._schedule({type:"start",id:r,args:t.value})}}if(this._running.size===0)return(s=this._runResolver)==null||s.resolve(),this._runResolver=null,void(this._state="stopped");if(this._blocked.size===this._running.size){let t=null,r=-1/0;for(const[i,n]of this._openBatches)n.size>r&&(t=i,r=n.size);return t==null&&this._fail(new Error("deadlock")),void t.send()}}}resume(e){const s=this._openBatches.get(e);if(this._openBatches.delete(e),s!=null)for(const t of s)this._blocked.delete(t)||this._fail(new Error(`job ${t} not suspended`))}async yieldFor(e,s){s.assertOpen(),this._running.has(e.id)||this._fail(new Error(`job ${e.id} not running`)),this._blocked.has(e.id)&&this._fail(new Error(`job ${e.id} already suspended`)),this._blocked.add(e.id),f(this._openBatches,s,()=>new Set).add(e.id),e.interrupt==null&&this._fail(new Error(`job ${e.id} hasn't resumed yet`)),e.interrupt.resolve(),e.interrupt=null;const t=o();let r;try{r={status:"fulfilled",value:await s.results}}catch(i){r={status:"rejected",reason:i}}return this._schedule({type:"continue",continuation:t,data:r,job:e}),t.promise}run(){this._state!=="ready"&&this._fail(new Error(`executor not ready to start. state=${this._state}`));const e=o();return this._state="running",this._runResolver=e,this._tryQueue(),e.promise}}export{v as createBatchExecutor};
